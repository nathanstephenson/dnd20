{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/natha/Documents/Projects/dnd20/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  query getAllUsers{\\n    users {\\n      name\\n      username\\n      password\\n    }\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import{gql,useLazyQuery,useQuery}from'@apollo/client';//queries for client, import from here to necessary paths\nexport var getUsers=gql(_templateObject());export function Users(){var _useQuery=useQuery(getUsers),loading=_useQuery.loading,error=_useQuery.error,data=_useQuery.data;/*if (error){ \r\n    return `Error ${error}`;}\r\n  if (loading){//no conditionals inside hook                                                                                                                                                                                            \r\n    return null;}*/return data;//maybe break this down some more into sections we already know are strings; assuming this doesn't need to be if/elif/else\n}","map":{"version":3,"sources":["C:/Users/natha/Documents/Projects/dnd20/client/src/queries.js"],"names":["gql","useLazyQuery","useQuery","getUsers","Users","loading","error","data"],"mappings":"yZAAA,OAAQA,GAAR,CAAaC,YAAb,CAA2BC,QAA3B,KAA0C,gBAA1C,CAEA;AACA,MAAO,IAAMC,CAAAA,QAAQ,CAAGH,GAAH,mBAAd,CASP,MAAO,SAASI,CAAAA,KAAT,EAAgB,eACUF,QAAQ,CAACC,QAAD,CADlB,CACdE,OADc,WACdA,OADc,CACLC,KADK,WACLA,KADK,CACEC,IADF,WACEA,IADF,CAErB;AACF;AACA;AACA,mBACE,MAAOA,CAAAA,IAAP,CAAY;AACb","sourcesContent":["import {gql, useLazyQuery, useQuery} from '@apollo/client';\r\n\r\n//queries for client, import from here to necessary paths\r\nexport const getUsers = gql`\r\n  query getAllUsers{\r\n    users {\r\n      name\r\n      username\r\n      password\r\n    }\r\n  }\r\n`;\r\nexport function Users(){\r\n  const {loading, error, data} = useQuery(getUsers);\r\n  /*if (error){ \r\n    return `Error ${error}`;}\r\n  if (loading){//no conditionals inside hook                                                                                                                                                                                            \r\n    return null;}*/\r\n  return(data)//maybe break this down some more into sections we already know are strings; assuming this doesn't need to be if/elif/else\r\n}"]},"metadata":{},"sourceType":"module"}