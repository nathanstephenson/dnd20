[{"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js":"1","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js":"2","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js":"3","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js":"4","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js":"5","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js":"6","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js":"7","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js":"8","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js":"9","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js":"10","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Play.js":"11","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\MyAccount.js":"12","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\play\\party.js":"13","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\DisplayCampaigns.js":"14","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\EditCampaign.js":"15","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\Main.js":"16","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\navbar.js":"17","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\PageSwitch.js":"18","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\DisplayCharacters.js":"19","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\EditCharacter.js":"20"},{"size":454,"mtime":1619209427254,"results":"21","hashOfConfig":"22"},{"size":3790,"mtime":1619435515472,"results":"23","hashOfConfig":"22"},{"size":5554,"mtime":1619439132406,"results":"24","hashOfConfig":"22"},{"size":718,"mtime":1618002469102,"results":"25","hashOfConfig":"22"},{"size":4402,"mtime":1619443897108,"results":"26","hashOfConfig":"22"},{"size":5969,"mtime":1618869143191,"results":"27","hashOfConfig":"22"},{"size":1824,"mtime":1619424394527,"results":"28","hashOfConfig":"22"},{"size":155,"mtime":1619092545419,"results":"29","hashOfConfig":"22"},{"size":1875,"mtime":1619378314358,"results":"30","hashOfConfig":"22"},{"size":849,"mtime":1618539137247,"results":"31","hashOfConfig":"22"},{"size":2133,"mtime":1619378925633,"results":"32","hashOfConfig":"22"},{"size":363,"mtime":1619194878946,"results":"33","hashOfConfig":"22"},{"size":1749,"mtime":1619382593152,"results":"34","hashOfConfig":"22"},{"size":1430,"mtime":1619426580379,"results":"35","hashOfConfig":"22"},{"size":5547,"mtime":1619431896226,"results":"36","hashOfConfig":"22"},{"size":1093,"mtime":1619209521415,"results":"37","hashOfConfig":"22"},{"size":960,"mtime":1619209448944,"results":"38","hashOfConfig":"22"},{"size":1007,"mtime":1619209471715,"results":"39","hashOfConfig":"22"},{"size":2648,"mtime":1619439394046,"results":"40","hashOfConfig":"22"},{"size":9983,"mtime":1619378385484,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"t3che4",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js",[],["90","91"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js",["92","93"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js",["94"],"import React, { useEffect, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport Register from './Register';\r\nimport {getUserID} from '../queries'\r\n\r\nexport default function Login(props) {\r\n    const [id, setID] = useState(null)\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [registered, toggleRegistered] = useState(true)\r\n    const [stayLoggedIn, setStay] = useState(false)\r\n    const [badLogin, toggleBadLogin] = useState(false)\r\n    const [getID, {data, loading, called}] = useLazyQuery(getUserID, {fetchPolicy:'network-only'})\r\n\r\n    useEffect(()=>{//if the client recieves an id upon request, the user may continue. if not, they are stuck\r\n        if(!loading&&(id!==null)){\r\n            props.handleLogin(id)\r\n        }\r\n        if(!loading && called && id===null){\r\n            if(data!==undefined){\r\n                setID(data.getUserID)\r\n            }else{\r\n                toggleBadLogin(true)\r\n            }\r\n        }\r\n    }, [loading, called, id, data, props])\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n            {registered && //show login form if not logged in\r\n                (<><div><form id=\"Form\" className=\"Form\" onSubmit={(e)=>{e.preventDefault();getID({variables:{username:username, password:password}})}}>\r\n                        <p> Please enter your username and password </p>\r\n                        <label htmlFor=\"user\">Username: \r\n                            <input type=\"username\" name=\"user\" id=\"user\" required={true} autoFocus={true} value={username} onChange={(e)=>{e.preventDefault();setUsername(e.target.value)}}/>\r\n                        </label><br />\r\n                        <label htmlFor=\"pass\">Password: \r\n                            <input type=\"password\" name=\"pass\" id=\"pass\" required={true} value={password} onChange={(e)=>{e.preventDefault();setPassword(e.target.value);}}/>\r\n                        </label><br />\r\n                        <input type=\"submit\" value=\"Submit\" variant=\"outlined\"/>\r\n                        <label htmlFor=\"rememberLogin\"> Remember me\r\n                            <input type=\"checkbox\" id=\"rememberLogin\" name=\"rememberLogin\" value={stayLoggedIn}/>{/*not implemented yet*/}\r\n                        </label>\r\n                    </form>\r\n                    <button name=\"next2\" variant=\"outlined\" onClick={()=>{toggleRegistered(false)}}>\r\n                            register\r\n                    </button>\r\n                </div>\r\n                {badLogin && <p>Could not find a user to match input username and password.</p>}</>)\r\n            }\r\n            {loading && <p>loading...</p>}\r\n            {!registered && <Register Registered={()=>{toggleRegistered(true)}}/>}\r\n        </header>\r\n    )\r\n}\r\n\r\n/* class Login extends React.Component {//old version (class)\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.HandleLogin = this.props.HandleLogin;\r\n        this.SetLogin = this.props.SetLogin;\r\n        this.BadLogin = this.props.BadLogin;\r\n        this.Registered = this.Registered.bind(this);\r\n        this.NotRegistered = this.NotRegistered.bind(this);\r\n        this.handleLoginAttempt = this.handleLoginAttempt.bind(this);\r\n        this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.state = {registered:true, loggedIn: false, username: \"\", password: \"\"};\r\n    }\r\n\r\n    handleUsernameChange(e){\r\n        e.preventDefault(); \r\n        this.setState({username: e.target.value});\r\n        //console.log(this.state.username);\r\n    }\r\n    handlePasswordChange(e){\r\n        e.preventDefault();\r\n        this.setState({password: e.target.value});\r\n        //console.log(this.state.password);\r\n    }\r\n\r\n    handleLoginAttempt(e){//logs the form\r\n        e.preventDefault();\r\n        this.HandleLogin(this.state.username, this.state.password);\r\n        this.setState({loggedIn: true});\r\n        this.SetLogin();\r\n    }\r\n\r\n    NotRegistered(){\r\n        this.setState({registered: false});\r\n    }\r\n\r\n    Registered(){\r\n        this.setState({registered: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                {(!this.state.loggedIn && this.state.registered) && //show login form if not logged in\r\n                    (<div><form id=\"Form\" className=\"Form\" onSubmit={this.handleLoginAttempt}>\r\n                        <p> Please enter your username and password </p>\r\n                        <label htmlFor=\"user\">Username: \r\n                            <input type=\"username\" name=\"user\" id=\"user\" required={true} autoFocus={true} onChange={this.handleUsernameChange} value={this.state.username}/>\r\n                        </label><br />\r\n                        <label htmlFor=\"pass\">Password: \r\n                            <input type=\"password\" name=\"pass\" id=\"pass\" required={true} onChange={this.handlePasswordChange} value={this.state.password}/>\r\n                        </label><br />\r\n                        <input type=\"submit\" value=\"Submit\" variant=\"outlined\"/>\r\n                        <label htmlFor=\"rememberLogin\"> Remember me\r\n                            <input type=\"checkbox\" id=\"rememberLogin\" name=\"rememberLogin\" value={this.state.loggedIn}//not implemented yet, checkbox doesnt even return anything on submit\r\n                        </label>\r\n                    </form>\r\n                    <button name=\"next2\" variant=\"outlined\" onClick={this.NotRegistered}>\r\n                            register\r\n                    </button>\r\n                    {this.BadLogin && <p>Could not find a user to match input username and password.</p>}\r\n                    </div>)\r\n                }\r\n                {(!this.state.registered && !this.state.loggedIn) && <Register Registered={this.Registered}/>}\r\n            </header>\r\n        )\r\n    }\r\n} */","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js",["95"],"import React, { useContext } from 'react';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext';\r\nimport EditCharacter from '../components/characters/EditCharacter'\r\nimport {DisplayCharacters} from '../components/characters/DisplayCharacters'\r\n\r\nexport default class Characters extends React.Component {\r\n\r\n    static contextType = UserContext;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {selected:null, chosen:false, needsRefresh:false, needsSubmit:false}\r\n        this.handleEditSubmit = this.handleEditSubmit.bind(this)\r\n        this.changeSelected = this.changeSelected.bind(this)\r\n        this.clearSelected = this.clearSelected.bind(this)\r\n        this.wantsNew = this.wantsNew.bind(this)\r\n        this.refreshed = this.refreshed.bind(this)\r\n    }\r\n\r\n    handleEditSubmit(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    changeSelected(selected){\r\n        this.setState({selected:selected, chosen:true})\r\n    }\r\n\r\n    clearSelected(){//need to update context\r\n        this.setState({selected:null, chosen:false, needsRefresh:true})\r\n    }\r\n    wantsNew(){\r\n        this.setState({chosen:true})\r\n    }\r\n    refreshed(){\r\n        this.setState({needsRefresh:false})\r\n    }\r\n\r\n    render() {\r\n        const {user} = this.context\r\n        return(\r\n            <>\r\n                <h1 className=\"title\"> Characters </h1>\r\n                {!this.state.chosen && <>\r\n                    <button onClick={this.wantsNew}>New Character</button>\r\n                    <DisplayCharacters needsRefresh={this.state.needsRefresh} refreshed={this.refreshed} changeSelected={this.changeSelected} purpose=\"Edit\"/> \r\n                </>}\r\n                {this.state.chosen && <EditCharacter currentUser={user} characterID={this.state.selected} submit={this.handleEditSubmit} back={this.clearSelected}/>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Play.js",["96","97","98"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useSubscription, Subscription, useQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext'\r\nimport {currentSession, getUserID, onSessionUpdate} from '../queries'\r\nimport {PartyCharacters} from '../components/play/party'\r\nimport { DisplayCharacters } from '../components/characters/DisplayCharacters';\r\n\r\nexport default function Play(props) {\r\n    const {user} = useContext(UserContext)\r\n    const [selected, changeSelected] = useState(null)\r\n    const [needsRefresh, setNeedsRefresh] = useState(false)\r\n    const [needsRefetch, setNeedsRefetch] = useState(true)\r\n\r\n    return (<header className=\"App-header\">\r\n        {selected!==null ? <PlayView sessionID={selected} needsRefetch={needsRefetch} refetched={()=>{setNeedsRefetch(false)}}/> : <DisplayCharacters needsRefresh={needsRefresh} refreshed={()=>{setNeedsRefresh(true)}} changeSelected={changeSelected} purpose=\"Play\"/>}\r\n    </header>)\r\n}\r\n\r\nfunction PlayView(props){\r\n    const{data:queryData, loading:queryLoading, refetch} = useQuery(currentSession, {variables:{id:props.sessionID}})\r\n    const {data:updateData, loading:updateLoading} = useSubscription(onSessionUpdate, {variables:{id:props.sessionID}})\r\n    const [data, changeData] = useState(undefined)\r\n\r\n    useEffect(()=>{\r\n        if(props.needsRefetch){\r\n            refetch()\r\n            props.refetched()\r\n        }\r\n        if(updateData===undefined){\r\n            if(queryLoading){\r\n                console.log(\"loading\")\r\n            }\r\n            if(queryData!==undefined){\r\n                console.log(queryData.session)\r\n                changeData(queryData.session)\r\n            }\r\n        }else{\r\n            console.log(updateData.sessionUpdate)\r\n            changeData(updateData.sessionUpdate)\r\n        }\r\n    }, [queryLoading, queryData, updateLoading, updateData, refetch, props])\r\n\r\n    return (\r\n        <>\r\n            <h2>Play the game</h2>\r\n            {data!==undefined ? <PartyCharacters session={data}/> : <p>No characters in this party.</p>}\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\MyAccount.js",["99","100","101","102","103"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext'\r\nimport {getUserID} from '../queries'\r\n\r\nexport default function MyAccount(props) {\r\n    const {user} = useContext(UserContext)\r\n\r\n    return (\r\n        <>\r\n\r\n        </>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\play\\party.js",["104","105","106"],"import { useMutation } from '@apollo/client'\r\nimport React, { useContext } from 'react'\r\nimport { UserContext } from '../../misc/UserContext'\r\nimport { changeCharacterHealth } from '../../queries'\r\n\r\nexport function PartyCharacters(props){\r\n    const {user} = useContext(UserContext)\r\n    const session = props.session\r\n    const myCharacter = session.characters.map((currentValue, index)=>{if(currentValue.character.user===user._id){return <CharacterInfo key={index} character={currentValue} sessionID={session._id} currentUser={user._id}/>}})\r\n    const partyCharacters = session.characters.map((currentValue, index)=>{if(currentValue.character.user!==user._id){return <CharacterInfo key={index} character={currentValue} sessionID={session._id} currentUser={user._id}/>}})\r\n    return (\r\n        <>\r\n            {myCharacter}\r\n            {(session.characters.length===0) && <p>No characters in this party.</p>}\r\n            {(session.characters.length!==0) && partyCharacters}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CharacterInfo(props){\r\n    const character = props.character.character\r\n    const [changeHealth, {data}] = useMutation(changeCharacterHealth, {variables:{session:props.sessionID, character:props.character._id}})\r\n    return (<div className=\"campaign\">\r\n        <p key=\"c1\" className=\"campaign-name\">{character.name}</p>\r\n        <ul>\r\n            <li key=\"hp\">\r\n                <p>{character.hp}</p>\r\n                {character.user===props.currentUser && <>\r\n                    <button onClick={()=>{changeHealth({variables:{hp:character.hp+1}})}}>+</button>\r\n                    <button onClick={()=>{changeHealth({variables:{hp:character.hp-1}})}}>-</button>\r\n                </>}\r\n            </li>\r\n        </ul>\r\n    </div>)\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\DisplayCampaigns.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\EditCampaign.js",["107"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\Main.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\navbar.js",["108"],"import React from 'react'\r\nimport '../../App.css'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function NavBar(props){\r\n\r\n    const current = window.location.pathname\r\n    \r\n    var home = <Link to=\"/\"  className=\"navLink-home\">\r\n            <h3> DND20 </h3>\r\n        </Link>\r\n    var campaigns =  <Link to=\"/Campaigns\" className=\"navLink\">\r\n            <p> Campaigns </p>\r\n        </Link>\r\n    var characters = <Link to=\"/Characters\" className=\"navLink\">\r\n            <p> Characters </p>\r\n        </Link>\r\n    var play = <Link to=\"/Play\" className=\"navLink\">\r\n            <p> Play </p>\r\n        </Link>\r\n    var account = <Link to=\"/MyAccount\" className=\"navLink\">\r\n            <p> My Account </p>\r\n        </Link>\r\n    var links = [home, campaigns, characters, play, account]\r\n\r\n    //maybe set current page's link's background to different colour\r\n\r\n    return(\r\n        <nav className=\"navbar\">\r\n            {links}\r\n        </nav>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\PageSwitch.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\DisplayCharacters.js",["109","110","111"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\EditCharacter.js",["112"],"import React, {useContext, useState} from 'react'\r\nimport {useQuery, useMutation} from '@apollo/client'\r\nimport '../../App.css'\r\nimport {addCharacter, deleteCharacter, getCharacter, getClasses, getRaces, updateCharacterInfo, updateCharacterStats} from '../../queries'\r\nimport { arrayToOptions } from '../../functions/GeneralFunctions'\r\nimport { UserContext } from '../../misc/UserContext'\r\n\r\nexport default class EditCharacter extends React.Component {\r\n\r\n    static contextType = UserContext\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.user = this.props.currentUser\r\n        this.characterID = this.props.characterID\r\n        this.returnLoaded = this.returnLoaded.bind(this)\r\n        this.submittedNew = this.submittedNew.bind(this)\r\n        this.state = {character:null, submitNew:false, submitGeneral:false, name:\"\", race:\"\", bg:\"\", campaign:\"\"}\r\n    }\r\n\r\n    returnLoaded(character){\r\n        this.setState({character:character})\r\n    }\r\n\r\n    submittedNew(){\r\n        this.setState({submitNew:false, name:\"\", race:\"\", bg:\"\", campaign:\"\"})\r\n        this.props.back()\r\n    }\r\n\r\n    render(){\r\n        return(<>\r\n            <button className=\"backButton\" onClick={this.props.back}>Back</button>{/* vvv unloaded and unentered*/}\r\n            {/* ((this.characterID!==null)&&(this.state.character===null)) ? <LoadCharacter ID={this.characterID} return={this.returnLoaded}/> : <CharacterInfo submitNewGeneral={this.submitNewGeneral} user={this.user} character={this.state.character} new={this.state.character===null}/> */}\r\n            <CharacterInfo submitNew={this.submitNew} submitGeneral={this.submitGeneral} user={this.user} character={this.state.character} new={this.state.character===null} back={this.props.back}/>\r\n            {((this.characterID!==null)&&(this.state.character===null)) && <LoadCharacter ID={this.characterID} return={this.returnLoaded}/>}\r\n        </>)\r\n    }\r\n}\r\n\r\nfunction LoadCharacter(props){\r\n    console.log(props.ID)\r\n    const {loading, data, error} = useQuery(getCharacter, {variables:{id:props.ID}, fetchPolicy:'network-only'})\r\n    while(loading){\r\n        return(<p>loading...</p>)\r\n    }\r\n    if(error){//no need to print errors here, as they wont. just if data && data.variable\r\n        console.log(error)\r\n        return(<p></p>)\r\n    }else{\r\n        console.log(data)\r\n        props.return(data.character)\r\n        return(<p>done</p>)\r\n    }\r\n}\r\n\r\nfunction CharacterInfo(props){\r\n    console.log('character info', props.new)\r\n    const {loading:raceLoading, data:raceData} = useQuery(getRaces)\r\n    const {loading:classLoading, data:classData} = useQuery(getClasses)\r\n    const [page, changePage] = useState(0)\r\n    while(classLoading||raceLoading){\r\n        return(<p>Loading...</p>)\r\n    }\r\n    let pages = [\r\n        (props.new ? <NewGeneralInfo races={raceData.races} user={props.user} submit={props.submitNew} back={props.back}/> : <ExistingGeneralInfo character={props.character} classes={classData.classes} submit={props.submitGeneral} back={props.back}/>),\r\n    ]\r\n    pages.forEach(element => {\r\n        if(element!==pages[page]){\r\n            element = null\r\n        }\r\n    })\r\n    //make a set of buttons to change page with the index of the pages array\r\n    return (<div>\r\n        {pages}\r\n    </div>)\r\n}\r\n\r\nfunction NewGeneralInfo(props){\r\n    const {user} = useContext(UserContext)\r\n    const [name, changeName] = useState(\"\")\r\n    const [background, changeBG] = useState(\"\")\r\n    const [race, changeRace] = useState(\"\")\r\n    const [campaign, changeCampaign] = useState(\"\")\r\n    const [createNew, {loading:newLoading, data:newData}] = useMutation(addCharacter, {variables:{user:user._id, campaign:campaign, name:name, race:race, background:background}})\r\n    while(newLoading){\r\n        return(<p>Loading...</p>)\r\n    }\r\n    if(newData!==undefined){\r\n        props.back()\r\n    }\r\n    return (<form onSubmit={createNew}>\r\n        <input type=\"submit\" /><br/>\r\n        <label htmlFor=\"name\" className=\"tbLabel\">Name: \r\n        <input type=\"name\" id=\"name\" name=\"name\" required={true} onChange={(e)=>{e.preventDefault();changeName(e.target.value)}} value={name}/></label>\r\n        <CampaignSelect id=\"campaign\" campaigns={user.campaigns} changeCampaign={changeCampaign}/><br/>\r\n        <label htmlFor=\"bg\" className=\"tbLabel\">Background Info / Lore: \r\n        <textarea id=\"bg\" name=\"bg\" onChange={(e)=>{e.preventDefault();changeBG(e.target.value)}} value={background} rows=\"4\" cols=\"50\" maxLength=\"500\"/></label><br/>\r\n        <RaceSelect id=\"race\" races={props.races} changeRace={changeRace}/><br/>\r\n    </form>)\r\n}\r\n\r\nfunction ExistingGeneralInfo(props){\r\n    const {user} = useContext(UserContext)\r\n    const character = props.character\r\n    const [campaign, changeCampaign] = useState(character.campaign)\r\n    const [charClass, changeClass] = useState(character.class)\r\n    const [str, changeStr] = useState(character.str)\r\n    const [dex, changeDex] = useState(character.dex)\r\n    const [con, changeCon] = useState(character.con)\r\n    const [int, changeInt] = useState(character.int)\r\n    const [wis, changeWis] = useState(character.wis)\r\n    const [cha, changeCha] = useState(character.cha)//need to implement for maximum levels etc, although maybe later\r\n    console.log(charClass)\r\n    const [rename, toggleRename] = useState(false)\r\n    const [name, changeName] = useState(character.name)\r\n    const [delCharacter, {loading:delLoading, data:delData}] = useMutation(deleteCharacter, {variables:{character:character._id, user:character.user, campaign:character.campaign}})\r\n    const [updateInfo, {loading:infoLoading, data:infoData}] = useMutation(updateCharacterInfo, {variables:{id:character._id, name:name, campaign:campaign}})\r\n    const [updateStats, {loading:statsLoading, data:statsData}] = useMutation(updateCharacterStats, {variables:{id:character._id, class:charClass, cha:parseInt(cha), con:parseInt(con), str:parseInt(str), dex:parseInt(dex), int:parseInt(int), wis:parseInt(wis)}})\r\n    while(delLoading||infoLoading||statsLoading){\r\n        if(delLoading){\r\n            console.log(character._id, character.user, character.campaign)\r\n        }\r\n        return(<p>loading</p>)\r\n    }\r\n    if(delData!==undefined||infoData!==undefined||statsData!==undefined){\r\n        props.back()\r\n    }\r\n    return (<><div><h2>{character.name}</h2>\r\n        <button onClick={delCharacter}>Delete Character</button></div>\r\n        {rename ? <>\r\n            <form onSubmit={updateInfo}>\r\n                <label htmlFor=\"name\" className=\"tbLabel\">Name: \r\n                <input type=\"text\" id=\"name\" name=\"name\" required={true} onChange={(e)=>{e.preventDefault();changeName(e.target.value)}} value={name}/></label>\r\n                <CampaignSelect id=\"campaign\" current={campaign} campaigns={user.campaigns} changeCampaign={changeCampaign}/>\r\n                <input type=\"submit\"/><button onClick={()=>{toggleRename(!rename)}}>Cancel</button>\r\n            </form>\r\n        </> : <><button onClick={()=>{toggleRename(!rename)}}>Rename/ChangeCampaign</button><br/></>}\r\n        <form onSubmit={updateStats}>\r\n            <input type=\"submit\" /><br/>\r\n            <ClassSelect id=\"class\" current={charClass} classes={props.classes} changeClass={changeClass}/><br/>\r\n            <label htmlFor=\"str\" className=\"tbLabel\">Str: \r\n            <input type=\"number\" id=\"str\" name=\"str\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeStr(e.target.value)}} value={str}/></label>\r\n            <label htmlFor=\"dex\" className=\"tbLabel\">Dex: \r\n            <input type=\"number\" id=\"dex\" name=\"dex\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeDex(e.target.value)}} value={dex}/></label>\r\n            <label htmlFor=\"con\" className=\"tbLabel\">Con: \r\n            <input type=\"number\" id=\"con\" name=\"con\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeCon(e.target.value)}} value={con}/></label>\r\n            <label htmlFor=\"int\" className=\"tbLabel\">Int: \r\n            <input type=\"number\" id=\"int\" name=\"int\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeInt(e.target.value)}} value={int}/></label>\r\n            <label htmlFor=\"wis\" className=\"tbLabel\">Wis: \r\n            <input type=\"number\" id=\"wis\" name=\"wis\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeWis(e.target.value)}} value={wis}/></label>\r\n            <label htmlFor=\"cha\" className=\"tbLabel\">Cha: \r\n            <input type=\"number\" id=\"cha\" name=\"cha\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeCha(e.target.value)}} value={cha}/></label>\r\n        </form>\r\n    </>)\r\n}\r\n\r\nfunction ClassSelect(props){\r\n    let classOptions = arrayToOptions(props.classes, props.current)\r\n    return(\r\n        <label htmlFor=\"class\" className=\"tbLabel\">Class:\r\n            <select id=\"classes\" name=\"classes\" onChange={(e)=>{props.changeClass(props.classes[e.target.selectedIndex].index)}}>\r\n                {classOptions}\r\n            </select>\r\n        </label>\r\n    )\r\n}\r\n\r\nfunction RaceSelect(props){\r\n    const [selected, changeSelected] = useState(0)\r\n    let raceOptions = arrayToOptions(props.races)\r\n    return(\r\n        <div><label htmlFor=\"races\" className=\"tbLabel\">Race:\r\n            <select id=\"races\" name=\"races\" onChange={(e)=>{props.changeRace(props.races[e.target.selectedIndex].index); changeSelected(e.target.selectedIndex)}}>\r\n                {raceOptions}\r\n            </select></label>\r\n            <p>{props.races[selected].alignment}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CampaignSelect(props){\r\n    const campaignOptions = arrayToOptions(props.campaigns, props.current)\r\n    return(<>\r\n        <label htmlFor=\"campaigns\" className=\"tbLabel\">Campaign:\r\n            <select id=\"campaigns\" name=\"campaigns\" onChange={(e)=>{props.changeCampaign(props.campaigns[e.target.selectedIndex]._id)}}>\r\n                {campaignOptions}\r\n            </select>\r\n        </label>\r\n    </>)\r\n}\r\n",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":1,"column":16,"nodeType":"119","messageId":"120","endLine":1,"endColumn":25},{"ruleId":"117","severity":1,"message":"121","line":4,"column":10,"nodeType":"119","messageId":"120","endLine":4,"endColumn":14},{"ruleId":"117","severity":1,"message":"122","line":12,"column":26,"nodeType":"119","messageId":"120","endLine":12,"endColumn":33},{"ruleId":"117","severity":1,"message":"123","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":27},{"ruleId":"117","severity":1,"message":"124","line":2,"column":27,"nodeType":"119","messageId":"120","endLine":2,"endColumn":39},{"ruleId":"117","severity":1,"message":"125","line":5,"column":25,"nodeType":"119","messageId":"120","endLine":5,"endColumn":34},{"ruleId":"117","severity":1,"message":"126","line":10,"column":12,"nodeType":"119","messageId":"120","endLine":10,"endColumn":16},{"ruleId":"117","severity":1,"message":"118","line":1,"column":29,"nodeType":"119","messageId":"120","endLine":1,"endColumn":38},{"ruleId":"117","severity":1,"message":"127","line":1,"column":40,"nodeType":"119","messageId":"120","endLine":1,"endColumn":48},{"ruleId":"117","severity":1,"message":"128","line":2,"column":10,"nodeType":"119","messageId":"120","endLine":2,"endColumn":22},{"ruleId":"117","severity":1,"message":"125","line":5,"column":9,"nodeType":"119","messageId":"120","endLine":5,"endColumn":18},{"ruleId":"117","severity":1,"message":"126","line":8,"column":12,"nodeType":"119","messageId":"120","endLine":8,"endColumn":16},{"ruleId":"129","severity":1,"message":"130","line":9,"column":69,"nodeType":"131","messageId":"132","endLine":9,"endColumn":71},{"ruleId":"129","severity":1,"message":"130","line":10,"column":73,"nodeType":"131","messageId":"132","endLine":10,"endColumn":75},{"ruleId":"117","severity":1,"message":"133","line":22,"column":27,"nodeType":"119","messageId":"120","endLine":22,"endColumn":31},{"ruleId":"117","severity":1,"message":"134","line":131,"column":10,"nodeType":"119","messageId":"120","endLine":131,"endColumn":23},{"ruleId":"117","severity":1,"message":"135","line":7,"column":11,"nodeType":"119","messageId":"120","endLine":7,"endColumn":18},{"ruleId":"117","severity":1,"message":"136","line":4,"column":55,"nodeType":"119","messageId":"120","endLine":4,"endColumn":66},{"ruleId":"117","severity":1,"message":"137","line":12,"column":33,"nodeType":"119","messageId":"120","endLine":12,"endColumn":50},{"ruleId":"117","severity":1,"message":"138","line":13,"column":34,"nodeType":"119","messageId":"120","endLine":13,"endColumn":48},{"ruleId":"117","severity":1,"message":"139","line":60,"column":18,"nodeType":"119","messageId":"120","endLine":60,"endColumn":28},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setStay' is assigned a value but never used.","'useContext' is defined but never used.","'Subscription' is defined but never used.","'getUserID' is defined but never used.","'user' is assigned a value but never used.","'useState' is defined but never used.","'useLazyQuery' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'data' is assigned a value but never used.","'LeaveCampaign' is defined but never used.","'current' is assigned a value but never used.","'currentUser' is defined but never used.","'createSessionData' is assigned a value but never used.","'endSessionData' is assigned a value but never used.","'changePage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]