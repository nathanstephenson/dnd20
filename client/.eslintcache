[{"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js":"1","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js":"2","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js":"3","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js":"4","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js":"5","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js":"6","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js":"7","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js":"8","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js":"9","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js":"10","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Play.js":"11","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\MyAccount.js":"12","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\play\\party.js":"13","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\DisplayCampaigns.js":"14","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\EditCampaign.js":"15","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\Main.js":"16","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\navbar.js":"17","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\PageSwitch.js":"18","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\DisplayCharacters.js":"19","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\EditCharacter.js":"20","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\CharacterCreation.js":"21"},{"size":452,"mtime":1624141143175,"results":"22","hashOfConfig":"23"},{"size":3858,"mtime":1624572642933,"results":"24","hashOfConfig":"23"},{"size":6779,"mtime":1625946658666,"results":"25","hashOfConfig":"23"},{"size":718,"mtime":1624565761116,"results":"26","hashOfConfig":"23"},{"size":4453,"mtime":1625254804829,"results":"27","hashOfConfig":"23"},{"size":5969,"mtime":1618869143191,"results":"28","hashOfConfig":"23"},{"size":1731,"mtime":1624979601528,"results":"29","hashOfConfig":"23"},{"size":155,"mtime":1619471437226,"results":"30","hashOfConfig":"23"},{"size":1875,"mtime":1619378314358,"results":"31","hashOfConfig":"23"},{"size":549,"mtime":1621557561124,"results":"32","hashOfConfig":"23"},{"size":2251,"mtime":1625087510716,"results":"33","hashOfConfig":"23"},{"size":660,"mtime":1625852063703,"results":"34","hashOfConfig":"23"},{"size":1456,"mtime":1625946760972,"results":"35","hashOfConfig":"23"},{"size":1216,"mtime":1625938303114,"results":"36","hashOfConfig":"23"},{"size":6753,"mtime":1625954692975,"results":"37","hashOfConfig":"23"},{"size":1093,"mtime":1619471451810,"results":"38","hashOfConfig":"23"},{"size":2153,"mtime":1626295526441,"results":"39","hashOfConfig":"23"},{"size":1007,"mtime":1619209471715,"results":"40","hashOfConfig":"23"},{"size":2905,"mtime":1625951784969,"results":"41","hashOfConfig":"23"},{"size":14717,"mtime":1625956360712,"results":"42","hashOfConfig":"23"},{"size":964,"mtime":1624882816343,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"t3che4",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"46"},"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js",[],["97","98"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js",["99","100"],"import React, {useEffect} from 'react';\r\nimport {useQuery, useMutation} from '@apollo/client'\r\nimport '../App.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport {addUser, getUserID} from '../queries';\r\n\r\n\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\t\tthis.Registered = this.props.Registered;\r\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\r\n\t\tthis.handleEmailChange = this.handleEmailChange.bind(this);\r\n\t\tthis.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n\t\tthis.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n\t\tthis.handleRegisterAttempt = this.handleRegisterAttempt.bind(this);\r\n\t\tthis.state = {badForm:false, registered:false, name:\"\", email:\"\", username:\"\", password:\"\"};\r\n    }\r\n\thandleNameChange(e){\r\n\t\te.preventDefault();\r\n\t\tthis.setState({name: e.target.value});\r\n\t}\r\n\thandleEmailChange(e){\r\n\t\te.preventDefault();\r\n\t\tthis.setState({email: e.target.value});\r\n\t}\r\n\thandleUsernameChange(e){\r\n        e.preventDefault();\r\n        this.setState({username: e.target.value});\r\n    }\r\n    handlePasswordChange(e){\r\n        e.preventDefault();\r\n        this.setState({password: e.target.value});\r\n    }\r\n\r\n    handleRegisterAttempt(e){\r\n        e.preventDefault();\r\n\t\tif(!!this.state.name && !!this.state.email && !!this.state.username && !!this.state.password){\r\n\t\t\tthis.setState({registered: true});\r\n\t\t}else{\r\n\t\t\tthis.setState({badForm: true})\r\n\t\t}\r\n\t\t//need check all fields are filled out\r\n    }\r\n\r\n    render() {\r\n        return(//obviously needs more added\r\n            <>\r\n                {!this.state.registered && \r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<img src=\"images/Nooth_DnD.png\" width='300' alt=\"logo\"/>\r\n\t\t\t\t\t\t<h1 className=\"title\">\r\n\t\t\t\t\t\t\tSign Up\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t<form className=\"Form\" onSubmit={this.handleRegisterAttempt}>\r\n\t\t\t\t\t\t\t<label htmlFor=\"fullname\" className=\"tbLabel\">Full Name: \r\n\t\t\t\t\t\t\t<input type=\"name\" id=\"fullname\" name=\"fullname\" required={true} onChange={this.handleNameChange} value={this.state.name}/></label><br/>\r\n\t\t\t\t\t\t\t<label htmlFor=\"email\" className=\"tbLabel\" name=\"tbLabel\">Email: \r\n\t\t\t\t\t\t\t<input type=\"email\" id=\"email\" name=\"email\" required={true} onChange={this.handleEmailChange} value={this.state.email}/></label><br/>\r\n\t\t\t\t\t\t\t<label htmlFor=\"username\" className=\"tbLabel\" name=\"tbLabel\">Username: \r\n\t\t\t\t\t\t\t<input type=\"username\" id=\"username\" name=\"username\" required={true} onChange={this.handleUsernameChange} value={this.state.username}/></label><br/>\r\n\t\t\t\t\t\t\t<label htmlFor=\"password\" className=\"tbLabel\" name=\"tbLabel\">Password: \r\n\t\t\t\t\t\t\t<input type=\"password\" id=\"password\" name=\"password\" required={true} onChange={this.handlePasswordChange} value={this.state.password}/></label><br/>\r\n\t\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\"/>\r\n\t\t\t\t\t\t</form><br/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t{this.state.registered && <AddUser name={this.state.name} email={this.state.email} username={this.state.username} password={this.state.password}/>}\r\n\t\t\t\t{this.state.badForm && <p>Please make sure all boxes are filled in</p>/**this check seems redundant with the boxes being marked as required */}\r\n\t\t\t\t<button onClick={this.Registered} name=\"next\" variant=\"outlined\">\r\n\t\t\t\t\tGo back to login\r\n\t\t\t\t</button>\r\n            </>\r\n\t\t)\r\n    }\r\n}\r\n\r\nfunction AddUser(props){\r\n\tconst {data:queryData, loading:queryLoading} = useQuery(getUserID, {variables: {username:props.username, password:props.password}}, {fetchPolicy:'network-only'});//check email instead of password here, as password does not need to be unique\r\n\tconst [newUser, { data, loading }] = useMutation(addUser);\r\n\twhile (queryLoading||loading) {console.log(\"loading\");return(<p>Loading...</p>)}\r\n\tconsole.log(queryData.getUserID)\r\n\tif(queryData!==undefined){\r\n\t\tif(queryData.getUserID===null && !queryLoading){//apparently here cannot read 'undefined' user, but that same method works in login???\r\n\t\t\tconsole.log(\"user doesn't already exist\")\r\n\t\t\tif(data===undefined){\r\n\t\t\t\tconsole.log(\"adding user\")\r\n\t\t\t\tnewUser({variables:{name:props.name, email:props.email, username:props.username, password:props.password}});\r\n\t\t\t}else if(data!=null){\r\n\t\t\t\tconsole.log(data)\r\n\t\t\t\treturn(<>\r\n\t\t\t\t\t<p>Welcome, {props.name}</p>\r\n\t\t\t\t</>);\r\n\t\t\t}\r\n\t\t}else if(queryData.getUserID!==null && !queryLoading){\r\n\t\t\tconsole.log(\"user already exists\", queryData.getUserID)\r\n\t\t\treturn (\r\n\t\t\t\t<p>Error: User already exists, try again</p>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn <p></p>\r\n}\r\n\r\nexport default Register;","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js",["101"],"import React, { useEffect, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport Register from './Register';\r\nimport {getUserID} from '../queries'\r\n\r\nexport default function Login(props) {\r\n    const [id, setID] = useState(null)\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [registered, toggleRegistered] = useState(true)\r\n    const [stayLoggedIn, setStay] = useState(false)\r\n    const [badLogin, toggleBadLogin] = useState(false)\r\n    const [getID, {data, loading, called}] = useLazyQuery(getUserID, {fetchPolicy:'network-only'})\r\n\r\n    useEffect(()=>{//if the client recieves an id upon request, the user may continue. if not, they are stuck\r\n        if(!loading&&(id!==null)){\r\n            props.handleLogin(id)\r\n        }\r\n        if(!loading && called && id===null){\r\n            if(data!==undefined){\r\n                setID(data.getUserID)\r\n            }else{\r\n                toggleBadLogin(true)\r\n            }\r\n        }\r\n    }, [loading, called, id, data, props])\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n            {registered && //show login form if not logged in\r\n                (<><div><form id=\"Form\" className=\"Form\" onSubmit={(e)=>{e.preventDefault();getID({variables:{username:username, password:password}})}}>\r\n                        <p> Please enter your username and password </p>\r\n                        <label htmlFor=\"user\">Username: \r\n                            <input type=\"username\" name=\"user\" id=\"user\" required={true} autoFocus={true} value={username} onChange={(e)=>{e.preventDefault();setUsername(e.target.value)}}/>\r\n                        </label><br />\r\n                        <label htmlFor=\"pass\">Password: \r\n                            <input type=\"password\" name=\"pass\" id=\"pass\" required={true} value={password} onChange={(e)=>{e.preventDefault();setPassword(e.target.value);}}/>\r\n                        </label><br />\r\n                        <input type=\"submit\" value=\"Submit\" variant=\"outlined\"/>\r\n                        <label htmlFor=\"rememberLogin\"> Remember me\r\n                            <input type=\"checkbox\" id=\"rememberLogin\" name=\"rememberLogin\" value={stayLoggedIn}/>{/*not implemented yet*/}\r\n                        </label>\r\n                    </form>\r\n                    <button name=\"next2\" variant=\"outlined\" onClick={()=>{toggleRegistered(false)}}>\r\n                            register\r\n                    </button>\r\n                </div>\r\n                {badLogin && <p>Could not find a user to match input username and password.</p>}</>)\r\n            }\r\n            {loading && <p>loading...</p>}\r\n            {!registered && <Register Registered={()=>{toggleRegistered(true)}}/>}\r\n        </header>\r\n    )\r\n}\r\n\r\n/* class Login extends React.Component {//old version (class)\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.HandleLogin = this.props.HandleLogin;\r\n        this.SetLogin = this.props.SetLogin;\r\n        this.BadLogin = this.props.BadLogin;\r\n        this.Registered = this.Registered.bind(this);\r\n        this.NotRegistered = this.NotRegistered.bind(this);\r\n        this.handleLoginAttempt = this.handleLoginAttempt.bind(this);\r\n        this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.state = {registered:true, loggedIn: false, username: \"\", password: \"\"};\r\n    }\r\n\r\n    handleUsernameChange(e){\r\n        e.preventDefault(); \r\n        this.setState({username: e.target.value});\r\n        //console.log(this.state.username);\r\n    }\r\n    handlePasswordChange(e){\r\n        e.preventDefault();\r\n        this.setState({password: e.target.value});\r\n        //console.log(this.state.password);\r\n    }\r\n\r\n    handleLoginAttempt(e){//logs the form\r\n        e.preventDefault();\r\n        this.HandleLogin(this.state.username, this.state.password);\r\n        this.setState({loggedIn: true});\r\n        this.SetLogin();\r\n    }\r\n\r\n    NotRegistered(){\r\n        this.setState({registered: false});\r\n    }\r\n\r\n    Registered(){\r\n        this.setState({registered: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                {(!this.state.loggedIn && this.state.registered) && //show login form if not logged in\r\n                    (<div><form id=\"Form\" className=\"Form\" onSubmit={this.handleLoginAttempt}>\r\n                        <p> Please enter your username and password </p>\r\n                        <label htmlFor=\"user\">Username: \r\n                            <input type=\"username\" name=\"user\" id=\"user\" required={true} autoFocus={true} onChange={this.handleUsernameChange} value={this.state.username}/>\r\n                        </label><br />\r\n                        <label htmlFor=\"pass\">Password: \r\n                            <input type=\"password\" name=\"pass\" id=\"pass\" required={true} onChange={this.handlePasswordChange} value={this.state.password}/>\r\n                        </label><br />\r\n                        <input type=\"submit\" value=\"Submit\" variant=\"outlined\"/>\r\n                        <label htmlFor=\"rememberLogin\"> Remember me\r\n                            <input type=\"checkbox\" id=\"rememberLogin\" name=\"rememberLogin\" value={this.state.loggedIn}//not implemented yet, checkbox doesnt even return anything on submit\r\n                        </label>\r\n                    </form>\r\n                    <button name=\"next2\" variant=\"outlined\" onClick={this.NotRegistered}>\r\n                            register\r\n                    </button>\r\n                    {this.BadLogin && <p>Could not find a user to match input username and password.</p>}\r\n                    </div>)\r\n                }\r\n                {(!this.state.registered && !this.state.loggedIn) && <Register Registered={this.Registered}/>}\r\n            </header>\r\n        )\r\n    }\r\n} */","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js",["102"],"import React, { useContext } from 'react';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext';\r\nimport EditCharacter from '../components/characters/EditCharacter'\r\nimport {DisplayCharacters} from '../components/characters/DisplayCharacters'\r\n\r\nexport default class Characters extends React.Component {\r\n\r\n    static contextType = UserContext;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {selected:null, chosen:false, needsRefresh:false, needsSubmit:false}\r\n        this.handleEditSubmit = this.handleEditSubmit.bind(this)\r\n        this.changeSelected = this.changeSelected.bind(this)\r\n        this.clearSelected = this.clearSelected.bind(this)\r\n        this.wantsNew = this.wantsNew.bind(this)\r\n        this.refreshed = this.refreshed.bind(this)\r\n    }\r\n\r\n    handleEditSubmit(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    changeSelected(selected){\r\n        this.setState({selected:selected, chosen:true})\r\n    }\r\n\r\n    clearSelected(){//need to update context\r\n        this.setState({selected:null, chosen:false, needsRefresh:true})\r\n    }\r\n    wantsNew(){\r\n        this.setState({chosen:true})\r\n    }\r\n    refreshed(){\r\n        this.setState({needsRefresh:false})\r\n    }\r\n\r\n    render() {\r\n        const {user} = this.context\r\n        return(\r\n            <>\r\n                <h1 className=\"title\"> Characters </h1>\r\n                {!this.state.chosen && <>\r\n                    <button onClick={this.wantsNew}>New Character</button>\r\n                    <DisplayCharacters needsRefresh={this.state.needsRefresh} refreshed={this.refreshed} changeSelected={this.changeSelected} purpose=\"Edit\"/> \r\n                </>}\r\n                {this.state.chosen && <EditCharacter currentUser={user} characterID={this.state.selected} submit={this.handleEditSubmit} back={this.clearSelected}/>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Play.js",["103","104","105"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useSubscription, Subscription, useQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext'\r\nimport {currentSession, getUserID, onSessionUpdate} from '../queries'\r\nimport {PartyCharacters} from '../components/play/party'\r\nimport { DisplayCharacters } from '../components/characters/DisplayCharacters';\r\n\r\nexport default function Play(props) {\r\n    const {user} = useContext(UserContext)\r\n    const [selected, changeSelected] = useState(null)\r\n    const [needsRefresh, setNeedsRefresh] = useState(false)\r\n    const [needsRefetch, setNeedsRefetch] = useState(true)\r\n\r\n    return (<header className=\"App-header\">\r\n        {selected!==null ? <PlayView sessionID={selected} needsRefetch={needsRefetch} refetched={()=>{setNeedsRefetch(false)}}/> : <DisplayCharacters needsRefresh={needsRefresh} refreshed={()=>{setNeedsRefresh(true)}} changeSelected={changeSelected} purpose=\"Play\"/>}\r\n    </header>)\r\n}\r\n\r\nfunction PlayView(props){\r\n    const {data:queryData, loading:queryLoading, refetch} = useQuery(currentSession, {variables:{id:props.sessionID}})\r\n    const {data:updateData, loading:updateLoading} = useSubscription(onSessionUpdate, {variables:{id:props.sessionID}})\r\n    const [data, changeData] = useState(undefined)\r\n\r\n    useEffect(()=>{\r\n        if(props.needsRefetch){\r\n            refetch()\r\n            props.refetched()\r\n        }\r\n        if(updateData===undefined){\r\n            if(queryLoading){\r\n                console.log(\"loading\")\r\n            }\r\n            if(queryData!==undefined){\r\n                console.log(queryData.session)\r\n                changeData(queryData.session)\r\n            }\r\n        }else{\r\n            console.log(updateData.sessionUpdate)\r\n            changeData(updateData.sessionUpdate)\r\n        }\r\n    }, [queryLoading, queryData, updateLoading, updateData, refetch, props])\r\n\r\n    return (\r\n        <>\r\n            <h2>Play the game</h2>\r\n            {data!==undefined ? \r\n                <div className=\"play\">\r\n                    <PartyCharacters session={data}/>\r\n                </div>\r\n                : <p>No characters in this party.</p>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\MyAccount.js",["106","107","108","109"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext'\r\nimport {getUserID} from '../queries'\r\n\r\nexport default function MyAccount(props) {\r\n    const {user} = useContext(UserContext)\r\n    return (\r\n        <>\r\n            <div>Name: {user.name}</div>\r\n            <div>Username: {user.username}</div>\r\n            <div>Campaigns participated in: {user.campaigns.length} (DM of {user.campaigns.filter(current => current.dm===user._id).length})</div>\r\n            <div>Characters: {user.characters.length}</div>\r\n        </>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\play\\party.js",["110"],"import { useMutation } from '@apollo/client'\r\nimport React, { useContext } from 'react'\r\nimport { UserContext } from '../../misc/UserContext'\r\nimport { changeCharacterHealth } from '../../queries'\r\n\r\nexport function PartyCharacters(props){\r\n    const {user} = useContext(UserContext)\r\n    const session = props.session\r\n    const partyCharacters = session.characters.map((currentValue, index)=>{return <CharacterInfo key={index} character={currentValue} sessionID={session._id} currentUser={user._id}/>})\r\n    return (\r\n        <>\r\n            {(session.characters.length===0) && <p>No characters in this party.</p>}\r\n            {(session.characters.length!==0) && partyCharacters}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CharacterInfo(props){\r\n    const character = props.character.character\r\n    const [changeHealth, {data}] = useMutation(changeCharacterHealth, {variables:{session:props.sessionID, character:props.character._id}})\r\n    return (<div className=\"campaign\">\r\n        <p key=\"c1\" className=\"campaign-name\">{character.name}</p>\r\n        <ul>\r\n            <li key=\"hp\">\r\n                <p>{character.hp}</p>\r\n                {character.user._id===props.currentUser && <>\r\n                    <button onClick={()=>{changeHealth({variables:{hp:character.hp+1}})}}>+</button>\r\n                    <button onClick={()=>{changeHealth({variables:{hp:character.hp-1}})}}>-</button>\r\n                </>}\r\n            </li>\r\n        </ul>\r\n    </div>)\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\DisplayCampaigns.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\EditCampaign.js",["111","112","113"],"import React, {useContext, useState} from 'react';\r\nimport {useMutation, useQuery} from '@apollo/client'\r\nimport '../../App.css';\r\nimport {UserContext} from '../../misc/UserContext'\r\nimport {getCampaign, renameCampaign, deleteCampaign, leaveCampaign} from '../../queries'\r\n\r\nexport default class EditCampaign extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.campaignID = this.props.campaignID\r\n        this.handleNameChange = this.handleNameChange.bind(this)\r\n        this.submit = this.submit.bind(this)\r\n        this.delete = this.delete.bind(this)\r\n        this.submitted = this.submitted.bind(this)\r\n        this.returnCampaign = this.returnCampaign.bind(this)\r\n        this.toggleID = this.toggleID.bind(this)\r\n        this.state = {submit:false, delete:false, loaded:false, campaign:null, name:\"\", showID:false}\r\n    }\r\n\r\n    handleNameChange(e){\r\n\t\te.preventDefault();\r\n\t\tthis.setState({name: e.target.value});\r\n\t}\r\n\r\n    submit(e){\r\n        this.setState({submit:true})\r\n        this.props.submit(e)\r\n    }\r\n\r\n    delete(){\r\n        this.setState({delete:true})\r\n    }\r\n\r\n    submitted(){\r\n        this.setState({submit:false, delete:false}, ()=>{this.props.back()})\r\n    }\r\n\r\n    returnCampaign(campaign){\r\n        //console.log(\"selected campaign:\", campaign)\r\n        this.setState({campaign:campaign, name:campaign.name, loaded:true})\r\n    }\r\n\r\n    toggleID(){\r\n        this.setState({showID:!this.state.showID})\r\n    }\r\n\r\n    render() {\r\n        if(this.campaignID != null){\r\n            let isDM = false\r\n            let isActive = false\r\n            if(this.state.campaign !== null){\r\n                isDM = (this.props.currentUserID===this.state.campaign.dm)\r\n                isActive = (this.state.campaign.session!==null)\r\n            }\r\n            return(\r\n                <>\r\n                    {(!this.state.loaded && !this.state.submit) && <div>\r\n                        <LoadCampaign ID={this.campaignID} return={this.returnCampaign}/>\r\n                    </div>}\r\n                    {isDM && <>{(this.state.loaded && !this.state.submit) && <div><img src=\"images/Nooth_DnD.png\" className=\"App-logo\" alt=\"logo\" />\r\n                        <h1 className=\"title\">\r\n                            Edit Campaign \r\n                        </h1>\r\n                        {<><RemovePlayers ID={this.campaignID}/><br/></>}\r\n                        {this.state.showID ? <><p>{this.campaignID}<button onClick={this.toggleID}>x</button></p></> : <button onClick={this.toggleID}>Show ID</button>}\r\n                        <button onClick={this.delete}>Delete this campaign</button><br/><br/>\r\n                        <form className=\"Form\" onSubmit={this.submit}>\r\n                            <div><label htmlFor=\"name\" className=\"tbLabel\">Campaign Name: \r\n                            <input type=\"name\" id=\"name\" name=\"name\" required={true} onChange={this.handleNameChange} value={this.state.name}/></label><br/></div>\r\n                            <input type=\"submit\" value=\"Submit\"/>\r\n                        </form><br/>\r\n                    </div>}</>}\r\n                    {(!isDM ) && <LeaveCampaign ID={this.campaignID} back={this.props.back}/>}\r\n                    {this.state.submit && <SubmitCampaign submitted={this.submitted} id={this.campaignID} name={this.state.name}/>} \r\n                    {this.state.delete && <DeleteCampaign submitted={this.submitted} dm={this.state.campaign.dm} campaignID={this.campaignID}/>}\r\n                    <button onClick={this.props.back}>Go Back</button>\r\n                </>\r\n            )\r\n        }else{\r\n            return (\r\n                <div>\r\n                    <p>Error: No Campaign</p>\r\n                    <button onClick={this.props.back}>Go Back</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfunction LoadCampaign(props){\r\n    const {loading, data, error} = useQuery(getCampaign, {variables:{id:props.ID}, fetchPolicy:'network-only'})\r\n    while(loading){\r\n        return(<p>loading...</p>)\r\n    }\r\n    if(error){//no need to print errors here, as they wont. just if data && data.variable\r\n        console.log(error)\r\n        return(<p></p>)\r\n    }else{\r\n        props.return(data.campaign)\r\n        return(<p>done</p>)\r\n    }\r\n}\r\n\r\nfunction SubmitCampaign(props){\r\n    const [submitCampaign, {data, loading}] = useMutation(renameCampaign)\r\n    while(loading){\r\n        return(<p>loading</p>)\r\n    }\r\n    if(data===undefined){\r\n        submitCampaign({variables:{id:props.id, name:props.name}})\r\n    }else{\r\n        console.log(data)\r\n        props.submitted()\r\n    }\r\n    return null\r\n}\r\n\r\nfunction DeleteCampaign(props){\r\n    const {user:currentUser} = useContext(UserContext)\r\n    const [delCampaign, { data, loading }] = useMutation(deleteCampaign);//this method means it only gets added once\r\n\twhile(loading){\r\n\t\treturn(<p>Loading...</p>);\r\n\t}\r\n    if(data===undefined){\r\n        delCampaign({variables:{user:currentUser._id, dm:props.dm, campaign:props.campaignID}})\r\n        console.log('attempted deleteCampaign')\r\n    }else if(data != null){\r\n        console.log('done', data)\r\n        props.submitted()\r\n    }\r\n    return null\r\n}\r\n\r\nfunction LeaveCampaign(props){\r\n    const {user:currentUser} = useContext(UserContext)\r\n    const [tryLeaveCampaign, { data, loading }] = useMutation(leaveCampaign);\r\n\twhile(loading){\r\n\t\treturn(<p>Loading...</p>);\r\n\t}\r\n    return <button onClick={()=>{tryLeaveCampaign({variables:{user:currentUser._id, campaign:props.ID}});props.back()}}>Leave Campaign</button>\r\n}\r\n\r\nfunction RemovePlayers(props){\r\n    const {user} = useContext(UserContext)\r\n    const { data, loading, refetch } = useQuery(getCampaign, {variables:{id:props.ID}, notifyOnNetworkStatusChange:'true'})\r\n    const [removePlayer, { data:response, loading:waitingResponse }] = useMutation(leaveCampaign)//this method means it only gets added once\r\n    const [players, updatePlayers] = useState([])\r\n    useState(()=>{\r\n        if(loading||waitingResponse){\r\n            console.log(\"loading\")\r\n        }\r\n        if(data!==undefined && loading===false){\r\n            if(data!==null){\r\n                console.log(data.campaign)\r\n                if(data.campaign===null){\r\n                    refetch()\r\n                }else{\r\n                    updatePlayers(data.campaign.characters.map((value, index)=>{\r\n                        if(value.user._id!==user._id){\r\n                            return <button onClick={()=>{removePlayer({variables:{user:value.user._id, campaign:props.ID}});refetch()}}>Remove {value.user.name}</button>\r\n                        }else{return null}\r\n                    }))\r\n                }\r\n            }\r\n        }\r\n    },[data, loading])\r\n    return <>{players}</>\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\Main.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\navbar.js",["114"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\PageSwitch.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\DisplayCharacters.js",["115","116","117","118","119","120"],"import { useQuery, useMutation, useSubscription } from '@apollo/client'\r\nimport React, {useContext, useEffect} from 'react'\r\nimport {UserContext} from '../../misc/UserContext'\r\nimport { currentSessionID, createSession, endSession } from '../../queries'\r\n\r\nexport function DisplayCharacters(props){//need to render the Campaign function for as many as there are in campaigns collection\r\n    const {user, refreshUser} = useContext(UserContext)\r\n    if(props.needsRefresh){\r\n        refreshUser()\r\n        props.refreshed()\r\n    }\r\n    const [startSession, {data: createSessionData}] = useMutation(createSession)\r\n    const [finishSession, {data: endSessionData}] = useMutation(endSession)\r\n    const currentUser = user\r\n    const characterList = currentUser.characters.map((currentValue, index)=>{//doesn't render if user doesn't have campaign\r\n        var cam = currentUser.campaigns.find(element => element._id===currentValue.campaign)\r\n        return <Character key={index} character={currentValue} changeSelected={props.changeSelected} purpose={props.purpose} currentUser={user} campaign={cam}/>\r\n    })\r\n    if(props.purpose===\"Play\"){\r\n        characterList.push(currentUser.campaigns.map(element=>{\r\n            return (<>\r\n                {user._id===element.dm && element.currentSession===null && \r\n                    <button onClick={() => startSession({variables:{campaign:element._id, user:user._id}})}>\r\n                        Begin {element.name}\r\n                    </button>\r\n                }\r\n                {user._id===element.dm && element.currentSession!==null && \r\n                    <button onClick={() => finishSession({variables:{campaign:element._id, user:user._id}})}>\r\n                        End {element.name} session\r\n                    </button>\r\n                }\r\n            </>)\r\n        }))\r\n    }\r\n    return (\r\n        <div>\r\n            {props.purpose===\"Play\" && <button onClick={()=>{refreshUser()}}>Refresh</button>}\r\n            {(user.characters.length===0) && <p>You do not currently have any characters.</p>}\r\n            {(user.campaigns.length!==0) && characterList}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Character(props){\r\n        console.log(props.campaign)\r\n    return (\r\n        <div className=\"character\">\r\n            <p key=\"c1\" className=\"character-name\">{props.character.name}</p>\r\n            <ul>\r\n                <li key=\"mainButton\">\r\n                    {props.purpose===\"Edit\" && <button onClick={() => props.changeSelected(props.character._id)}>\r\n                        Edit\r\n                    </button>}\r\n                    {((props.purpose===\"Play\" && props.campaign!==undefined) && props.campaign.currentSession!==null) && <button onClick={() => props.changeSelected(props.campaign.currentSession)}>\r\n                        Play\r\n                    </button>}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\EditCharacter.js",["121","122"],"import React, {useContext, useEffect, useState} from 'react'\r\nimport {useQuery, useLazyQuery, useMutation} from '@apollo/client'\r\nimport '../../App.css'\r\nimport {addCharacter, deleteCharacter, getCharacter, getClasses, getClass, getRaces, updateCharacterInfo, updateCharacterStats, updateCharacterSkills} from '../../queries'\r\nimport { arrayToOptions } from '../../functions/GeneralFunctions'\r\nimport { UserContext } from '../../misc/UserContext'\r\nimport { levelsAreBalanced, getRemainingLevelPoints } from '../../functions/CharacterCreation'\r\n\r\n\r\n\r\nexport default function EditCharacter(props){\r\n    const user = props.currentUser\r\n    const [character, updateCharacter] = useState(null)\r\n    const {loading, data, refetch: reloadCharacter} = useQuery(getCharacter, {variables:{id:props.characterID}, fetchPolicy:'network-only'})\r\n    useEffect(()=>{\r\n        if (loading===false && data!==undefined){\r\n            updateCharacter(data.character)\r\n        }\r\n        if(loading){\r\n            return(<p>Loading..</p>)\r\n        }\r\n    }, [data, loading, props.characterID])\r\n    while(loading){\r\n        return(<p>Loading...</p>)\r\n    }\r\n    return(<>\r\n        <button className=\"backButton\" onClick={props.back}>Back</button>{/* vvv unloaded and unentered*/}\r\n        {loading===false && (character!==null ? <CharacterInfo user={user} character={character} reload={reloadCharacter} back={props.back}/> : <NewGeneralInfo user={user} back={props.back}/>)}\r\n    </>)\r\n}\r\n\r\nfunction NewGeneralInfo(props){\r\n    const [name, changeName] = useState(\"\")\r\n    const [background, changeBG] = useState(\"\")\r\n    const [race, changeRace] = useState(\"\")\r\n    const [campaign, changeCampaign] = useState(\"\")\r\n    const {loading:raceLoading, data:raceData} = useQuery(getRaces)\r\n    const [createNew, {loading:newLoading, data:newData}] = useMutation(addCharacter)\r\n    useEffect(()=>{\r\n        if (props.user.campaigns[0]!==undefined){\r\n            changeCampaign(props.user.campaigns[0]._id)\r\n        }\r\n        if(raceData!==undefined){\r\n            if (raceData.races[0]!==undefined){\r\n                changeRace(raceData.races[0].index)\r\n            }\r\n        }\r\n    },[raceData, props.user.campaigns])\r\n    while(raceLoading||newLoading){\r\n        return(<p>Loading...</p>)\r\n    }\r\n    if(newData!==undefined){\r\n        props.back()\r\n    }\r\n    return (<form onSubmit={()=>{console.log(props.user._id, campaign, name, race, background);createNew({variables:{user:props.user._id, campaign:campaign, name:name, race:race, background:background}})}}>\r\n        <input type=\"submit\" /><br/>\r\n        <label htmlFor=\"name\" className=\"tbLabel\">Name: \r\n        <input type=\"name\" id=\"name\" name=\"name\" required={true} onChange={(e)=>{e.preventDefault();changeName(e.target.value)}} value={name}/></label>\r\n        <CampaignSelect id=\"campaign\" campaigns={props.user.campaigns} changeCampaign={changeCampaign}/><br/>\r\n        <label htmlFor=\"bg\" className=\"tbLabel\">Background Info / Lore: \r\n        <textarea id=\"bg\" name=\"bg\" onChange={(e)=>{e.preventDefault();changeBG(e.target.value)}} value={background} rows=\"4\" cols=\"50\" maxLength=\"500\"/></label><br/>\r\n        <RaceSelect id=\"race\" races={raceData.races} changeRace={changeRace}/><br/>\r\n    </form>)\r\n}\r\n\r\nfunction CharacterInfo(props){\r\n    //console.log(props.character)\r\n    const {loading:classLoading, data:classData} = useQuery(getClasses)\r\n    const [page, changePage] = useState(0)\r\n    while(classLoading){\r\n        return(<p>Loading...</p>)\r\n    }\r\n    let pages = <>{[\r\n            page===0 && <ExistingGeneralInfo character={props.character} classes={classData.classes} back={props.back}/>,\r\n            page===1 && <Proficiencies reload={props.reload} character={props.character}/>\r\n        ]}<p className=\"Form\">Page:\r\n            <button onClick={()=>{changePage(0)}}>1</button>\r\n            <button onClick={()=>{changePage(1)}}>2</button>\r\n        </p></>\r\n    return (<div><h2>{props.character.name}</h2>\r\n        <div className=\"Form\">{pages}</div>\r\n    </div>)\r\n}\r\n\r\nfunction ExistingGeneralInfo(props){\r\n    const {user} = useContext(UserContext)\r\n    const character = props.character\r\n    const [campaign, changeCampaign] = useState(character.campaign)\r\n    const [charClass, changeClass] = useState(character.class)\r\n    const [str, changeStr] = useState(character.str)\r\n    const [dex, changeDex] = useState(character.dex)\r\n    const [con, changeCon] = useState(character.con)\r\n    const [int, changeInt] = useState(character.int)\r\n    const [wis, changeWis] = useState(character.wis)\r\n    const [cha, changeCha] = useState(character.cha)//need to implement for maximum levels etc.\r\n    const [rename, toggleRename] = useState(false)\r\n    const [name, changeName] = useState(character.name)\r\n    const [delCharacter, {loading:delLoading, data:delData}] = useMutation(deleteCharacter, {variables:{character:character._id, user:character.user._id, campaign:character.campaign}})\r\n    const [updateInfo, {loading:infoLoading, data:infoData}] = useMutation(updateCharacterInfo, {variables:{id:character._id, name:name, campaign:campaign}})\r\n    const [updateStats, {loading:statsLoading, data:statsData}] = useMutation(updateCharacterStats, {variables:{id:character._id, class:charClass, cha:parseInt(cha), con:parseInt(con), str:parseInt(str), dex:parseInt(dex), int:parseInt(int), wis:parseInt(wis)}})\r\n    const [badStats, setBadStats] = useState(false)\r\n    const levels = [str, dex, con, int, wis, cha]\r\n    const [remainingLevelPoints, setRemaining] = useState(getRemainingLevelPoints(levels))\r\n\r\n    useEffect(()=>{//only runs once, because props.classes never changes\r\n        if (props.classes[0]!==undefined){\r\n            changeClass(props.classes[0].index)\r\n        }\r\n    },[props.classes])\r\n\r\n    while(delLoading||infoLoading||statsLoading){\r\n        if(delLoading){\r\n            console.log(character._id, character.user._id, character.campaign)\r\n        }\r\n        return(<p>loading</p>)\r\n    }\r\n    if(delData!==undefined||infoData!==undefined||statsData!==undefined){\r\n        props.back()\r\n    }\r\n    return (<><div>\r\n        <button onClick={delCharacter}>Delete Character</button></div>\r\n        {rename ? <>\r\n            <form onSubmit={updateInfo}>\r\n                <label htmlFor=\"name\" className=\"tbLabel\">Name: \r\n                <input type=\"text\" id=\"name\" name=\"name\" required={true} onChange={(e)=>{e.preventDefault();changeName(e.target.value)}} value={name}/></label>\r\n                <CampaignSelect id=\"campaign\" current={campaign} campaigns={user.campaigns} changeCampaign={changeCampaign}/>\r\n                <input type=\"submit\"/><button onClick={()=>{toggleRename(!rename)}}>Cancel</button>\r\n            </form>\r\n        </> : <><button onClick={()=>{toggleRename(!rename)}}>Rename/ChangeCampaign</button><br/></>}\r\n        <form className=\"Form\" onSubmit={()=>{if(levelsAreBalanced([str, dex, con, int, wis, cha])){updateStats();setBadStats(false)}else{setBadStats(true)}}}>\r\n            <input type=\"submit\" /><br/>\r\n            <ClassSelect id=\"class\" current={charClass} classes={props.classes} changeClass={changeClass}/><br/>\r\n            <label htmlFor=\"str\" className=\"tbLabel\">Str: \r\n            <input type=\"number\" id=\"str\" name=\"str\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{const newLevelsStr = [str + (Number.parseInt(e.target.value) - str), dex, con, int, wis, cha];e.preventDefault();if(levelsAreBalanced(newLevelsStr)){changeStr(Number.parseInt(e.target.value));setRemaining(getRemainingLevelPoints(newLevelsStr))}else{e.target.innerText = str}}} value={str}/></label>\r\n            <label htmlFor=\"dex\" className=\"tbLabel\">Dex: \r\n            <input type=\"number\" id=\"dex\" name=\"dex\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{const newLevelsDex = [str, dex + (Number.parseInt(e.target.value) - dex), con, int, wis, cha];e.preventDefault();if(levelsAreBalanced(newLevelsDex)){changeDex(Number.parseInt(e.target.value));setRemaining(getRemainingLevelPoints(newLevelsDex))}else{e.target.innerText = dex}}} value={dex}/></label>\r\n            <label htmlFor=\"con\" className=\"tbLabel\">Con: \r\n            <input type=\"number\" id=\"con\" name=\"con\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{const newLevelsCon = [str, dex, con + (Number.parseInt(e.target.value) - con), int, wis, cha];e.preventDefault();if(levelsAreBalanced(newLevelsCon)){changeCon(Number.parseInt(e.target.value));setRemaining(getRemainingLevelPoints(newLevelsCon))}else{e.target.innerText = con}}} value={con}/></label>\r\n            <label htmlFor=\"int\" className=\"tbLabel\">Int: \r\n            <input type=\"number\" id=\"int\" name=\"int\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{const newLevelsInt = [str, dex, con, int + (Number.parseInt(e.target.value) - int), wis, cha];e.preventDefault();if(levelsAreBalanced(newLevelsInt)){changeInt(Number.parseInt(e.target.value));setRemaining(getRemainingLevelPoints(newLevelsInt))}else{e.target.innerText = int}}} value={int}/></label>\r\n            <label htmlFor=\"wis\" className=\"tbLabel\">Wis: \r\n            <input type=\"number\" id=\"wis\" name=\"wis\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{const newLevelsWis = [str, dex, con, int, wis + (Number.parseInt(e.target.value) - wis), cha];e.preventDefault();if(levelsAreBalanced(newLevelsWis)){changeWis(Number.parseInt(e.target.value));setRemaining(getRemainingLevelPoints(newLevelsWis))}else{e.target.innerText = wis}}} value={wis}/></label>\r\n            <label htmlFor=\"cha\" className=\"tbLabel\">Cha: \r\n            <input type=\"number\" id=\"cha\" name=\"cha\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{const newLevelsCha = [str, dex, con, int, wis, cha + (Number.parseInt(e.target.value) - cha)];e.preventDefault();if(levelsAreBalanced(newLevelsCha)){changeCha(Number.parseInt(e.target.value));setRemaining(getRemainingLevelPoints(newLevelsCha))}else{e.target.innerText = cha}}} value={cha}/></label>\r\n            <p>{remainingLevelPoints} points remaining</p>\r\n        </form>\r\n        {badStats && <p>bad stats</p>}\r\n    </>)\r\n}\r\n\r\nfunction Proficiencies(props){//works(only for first set of choices), just needs submit button\r\n    console.log(props.character.skills)\r\n    const {data, loading} = useQuery(getClass, {variables:{index:props.character.class}})\r\n    const [defaults, changeDefaults] = useState([])\r\n    const [options, changeOptions] = useState([])\r\n    const [updated, changeUpdated] = useState(false)\r\n    useEffect(()=>{\r\n        if (!(data===null||data===undefined) && loading===false && updated===false){\r\n            changeDefaults(data.class.proficiencies.map((currentValue)=>{return currentValue.name}))\r\n            changeOptions(data.class.proficiency_choices.map((current, index)=>{\r\n                return <ProficienciesChooseFrom defaults={data.class.proficiencies.map((currentValue)=>{return currentValue.index})} character={props.character} options={data.class.proficiency_choices[index]} reload={props.reload}/>\r\n            }))\r\n            changeUpdated(true)\r\n        }\r\n    },[data, loading, props, props.character, props.classes, updated])\r\n    while(loading){\r\n        return(<p>Loading data...</p>)\r\n    }\r\n    return(<>{options}<p>{defaults}</p></>)\r\n}\r\n\r\nfunction ProficienciesChooseFrom(props){\r\n    const [chosenOptions, changeChosen] = useState(props.options.from.map((currentValue, index)=>{if(props.character.skills.includes(currentValue.index)){return currentValue.index}else{return null}}))\r\n    const [chosen, updateChosen] = useState(chosenOptions.filter(current => current!==null).length)\r\n    const [updateSkills, {data:infoData}] = useMutation(updateCharacterSkills, {variables:{id:props.character._id, skills:Array.prototype.concat(props.defaults, chosenOptions.filter(current => current!==null))}})\r\n    const profOptions = (props.options.from.map((currentValue, index)=>{//trying to get preselection to work based on db data\r\n        return (<>\r\n            <input type=\"checkbox\" defaultChecked={props.character.skills.includes(currentValue.index)} name={index} id={currentValue.index} onChange={(e)=>{choose(e.target)}}/>\r\n            <label for={index}>{currentValue.name}</label>\r\n        </>)\r\n    }))\r\n\r\n    function choose(checkbox){\r\n        var newer = []\r\n        var newnumber = chosen\r\n        if(checkbox.checked){\r\n            if(chosen+1 <= props.options.choose){\r\n                newnumber++\r\n                newer = chosenOptions.map((currentValue, index)=>{if(index === Number.parseInt(checkbox.name)){return checkbox.id}else{return currentValue}})\r\n            }else{\r\n                checkbox.checked = false\r\n                newer = chosenOptions\r\n            }\r\n        }else{\r\n            newnumber--\r\n            newer = chosenOptions.map((currentValue, index)=>{if(index === Number.parseInt(checkbox.name)){return null}else{return currentValue}})\r\n        }\r\n        changeChosen(newer)\r\n        updateChosen(newnumber)\r\n    }\r\n    \r\n    return (props.options.from[0].type===\"Skills\" && <>\r\n         <p>Choose {props.options.choose}:</p>\r\n        <form onSubmit={(e)=>{e.preventDefault();updateSkills();props.reload()}}>\r\n            {profOptions}<input type=\"submit\"/>\r\n        </form>\r\n    </>)\r\n}\r\n\r\nfunction ClassSelect(props){\r\n    let classOptions = arrayToOptions(props.classes)\r\n    return(\r\n        <label htmlFor=\"class\" className=\"tbLabel\">Class:\r\n            <select id=\"classes\" required={true} name=\"classes\" onChange={(e)=>{props.changeClass(props.classes[e.target.selectedIndex].index)}} defaultValue={props.current}>\r\n                {classOptions}\r\n            </select>\r\n        </label>\r\n    )\r\n}\r\n\r\nfunction RaceSelect(props){\r\n    const [selected, changeSelected] = useState(0)\r\n    let raceOptions = arrayToOptions(props.races)\r\n    return(\r\n        <div><label htmlFor=\"races\" required={true} className=\"tbLabel\">Race:\r\n            <select id=\"races\" name=\"races\" selectedIndex=\"0\" onChange={(e)=>{props.changeRace(props.races[e.target.selectedIndex].index); changeSelected(e.target.selectedIndex)}}>\r\n                {raceOptions}\r\n            </select></label>\r\n            <p>{props.races[selected].alignment}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CampaignSelect(props){\r\n    const campaignOptions = arrayToOptions(props.campaigns)\r\n    if(props.campaigns.length===1){\r\n        props.changeCampaign(props.campaigns[0]._id)\r\n    }\r\n    return(<>\r\n        <label htmlFor=\"campaigns\" className=\"tbLabel\">Campaign:\r\n            <select id=\"campaigns\" name=\"campaigns\" selectedIndex=\"0\" required={true} onChange={(e)=>{props.changeCampaign(props.campaigns[e.target.selectedIndex]._id)}} defaultValue={props.current}>\r\n                {campaignOptions}\r\n            </select>\r\n        </label>\r\n    </>)\r\n}\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\CharacterCreation.js",["123"],"export function levelsAreBalanced(levels){//input an array [str, dex, con, int, wis, cha]\r\n    return (0 <= getRemainingLevelPoints(levels) && getRemainingLevelPoints(levels) <= 25) ? true : false\r\n}\r\n\r\nexport function getRemainingLevelPoints(levels){\r\n    let remaining = 25\r\n    levels.map((value)=>{\r\n        switch(value) {\r\n            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14:\r\n                remaining -= (value - 8)\r\n                break\r\n            case 15:\r\n                remaining -= 8\r\n                break\r\n            case 16:\r\n                remaining -= 10\r\n                break\r\n            case 17:\r\n                remaining -= 13\r\n                break\r\n            case 18:\r\n                remaining -= 18\r\n                break\r\n            default:\r\n                remaining -= 100\r\n                break\r\n        }\r\n    })\r\n    return remaining\r\n}",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":16,"nodeType":"130","messageId":"131","endLine":1,"endColumn":25},{"ruleId":"128","severity":1,"message":"132","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":14},{"ruleId":"128","severity":1,"message":"133","line":12,"column":26,"nodeType":"130","messageId":"131","endLine":12,"endColumn":33},{"ruleId":"128","severity":1,"message":"134","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":27},{"ruleId":"128","severity":1,"message":"135","line":2,"column":27,"nodeType":"130","messageId":"131","endLine":2,"endColumn":39},{"ruleId":"128","severity":1,"message":"136","line":5,"column":25,"nodeType":"130","messageId":"131","endLine":5,"endColumn":34},{"ruleId":"128","severity":1,"message":"137","line":10,"column":12,"nodeType":"130","messageId":"131","endLine":10,"endColumn":16},{"ruleId":"128","severity":1,"message":"129","line":1,"column":29,"nodeType":"130","messageId":"131","endLine":1,"endColumn":38},{"ruleId":"128","severity":1,"message":"138","line":1,"column":40,"nodeType":"130","messageId":"131","endLine":1,"endColumn":48},{"ruleId":"128","severity":1,"message":"139","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":22},{"ruleId":"128","severity":1,"message":"136","line":5,"column":9,"nodeType":"130","messageId":"131","endLine":5,"endColumn":18},{"ruleId":"128","severity":1,"message":"140","line":20,"column":27,"nodeType":"130","messageId":"131","endLine":20,"endColumn":31},{"ruleId":"128","severity":1,"message":"141","line":53,"column":17,"nodeType":"130","messageId":"131","endLine":53,"endColumn":25},{"ruleId":"128","severity":1,"message":"140","line":136,"column":32,"nodeType":"130","messageId":"131","endLine":136,"endColumn":36},{"ruleId":"128","severity":1,"message":"142","line":146,"column":33,"nodeType":"130","messageId":"131","endLine":146,"endColumn":41},{"ruleId":"128","severity":1,"message":"143","line":7,"column":11,"nodeType":"130","messageId":"131","endLine":7,"endColumn":18},{"ruleId":"128","severity":1,"message":"144","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":18},{"ruleId":"128","severity":1,"message":"145","line":1,"column":33,"nodeType":"130","messageId":"131","endLine":1,"endColumn":48},{"ruleId":"128","severity":1,"message":"129","line":2,"column":28,"nodeType":"130","messageId":"131","endLine":2,"endColumn":37},{"ruleId":"128","severity":1,"message":"146","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":26},{"ruleId":"128","severity":1,"message":"147","line":12,"column":33,"nodeType":"130","messageId":"131","endLine":12,"endColumn":50},{"ruleId":"128","severity":1,"message":"148","line":13,"column":34,"nodeType":"130","messageId":"131","endLine":13,"endColumn":48},{"ruleId":"128","severity":1,"message":"139","line":2,"column":19,"nodeType":"130","messageId":"131","endLine":2,"endColumn":31},{"ruleId":"128","severity":1,"message":"149","line":175,"column":32,"nodeType":"130","messageId":"131","endLine":175,"endColumn":40},{"ruleId":"150","severity":1,"message":"151","line":7,"column":23,"nodeType":"152","messageId":"153","endLine":7,"endColumn":25},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setStay' is assigned a value but never used.","'useContext' is defined but never used.","'Subscription' is defined but never used.","'getUserID' is defined but never used.","'user' is assigned a value but never used.","'useState' is defined but never used.","'useLazyQuery' is defined but never used.","'data' is assigned a value but never used.","'isActive' is assigned a value but never used.","'response' is assigned a value but never used.","'current' is assigned a value but never used.","'useQuery' is defined but never used.","'useSubscription' is defined but never used.","'currentSessionID' is defined but never used.","'createSessionData' is assigned a value but never used.","'endSessionData' is assigned a value but never used.","'infoData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]