[{"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js":"1","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js":"2","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js":"3","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js":"4","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js":"5","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js":"6","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js":"7","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js":"8","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js":"9","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js":"10","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Play.js":"11","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\MyAccount.js":"12","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\play\\party.js":"13","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\DisplayCampaigns.js":"14","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\EditCampaign.js":"15","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\Main.js":"16","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\navbar.js":"17","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\PageSwitch.js":"18","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\DisplayCharacters.js":"19","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\EditCharacter.js":"20"},{"size":454,"mtime":1619209427254,"results":"21","hashOfConfig":"22"},{"size":3790,"mtime":1619435515472,"results":"23","hashOfConfig":"22"},{"size":5554,"mtime":1619439132406,"results":"24","hashOfConfig":"22"},{"size":718,"mtime":1618002469102,"results":"25","hashOfConfig":"22"},{"size":4402,"mtime":1619443897108,"results":"26","hashOfConfig":"22"},{"size":5969,"mtime":1618869143191,"results":"27","hashOfConfig":"22"},{"size":1830,"mtime":1619471159722,"results":"28","hashOfConfig":"22"},{"size":155,"mtime":1619471437226,"results":"29","hashOfConfig":"22"},{"size":1875,"mtime":1619378314358,"results":"30","hashOfConfig":"22"},{"size":937,"mtime":1619465441595,"results":"31","hashOfConfig":"22"},{"size":2133,"mtime":1619378925633,"results":"32","hashOfConfig":"22"},{"size":363,"mtime":1619194878946,"results":"33","hashOfConfig":"22"},{"size":1749,"mtime":1619382593152,"results":"34","hashOfConfig":"22"},{"size":1430,"mtime":1619426580379,"results":"35","hashOfConfig":"22"},{"size":5508,"mtime":1619471187351,"results":"36","hashOfConfig":"22"},{"size":1093,"mtime":1619471451810,"results":"37","hashOfConfig":"22"},{"size":960,"mtime":1619209448944,"results":"38","hashOfConfig":"22"},{"size":1007,"mtime":1619209471715,"results":"39","hashOfConfig":"22"},{"size":2654,"mtime":1619474915792,"results":"40","hashOfConfig":"22"},{"size":10694,"mtime":1619475464259,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"t3che4",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"44"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"44"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"44"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js",[],["90","91"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js",["92","93"],"import React, {useEffect} from 'react';\r\nimport {useQuery, useMutation} from '@apollo/client'\r\nimport '../App.css';\r\nimport { Link } from \"react-router-dom\";\r\nimport {addUser, getUserID} from '../queries';\r\n\r\n\r\n\r\nclass Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\t\tthis.Registered = this.props.Registered;\r\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\r\n\t\tthis.handleEmailChange = this.handleEmailChange.bind(this);\r\n\t\tthis.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n\t\tthis.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n\t\tthis.handleRegisterAttempt = this.handleRegisterAttempt.bind(this);\r\n\t\tthis.state = {badForm:false, registered:false, name:\"\", email:\"\", username:\"\", password:\"\"};\r\n    }\r\n\thandleNameChange(e){\r\n\t\te.preventDefault();\r\n\t\tthis.setState({name: e.target.value});\r\n\t}\r\n\thandleEmailChange(e){\r\n\t\te.preventDefault();\r\n\t\tthis.setState({email: e.target.value});\r\n\t}\r\n\thandleUsernameChange(e){\r\n        e.preventDefault();\r\n        this.setState({username: e.target.value});\r\n    }\r\n    handlePasswordChange(e){\r\n        e.preventDefault();\r\n        this.setState({password: e.target.value});\r\n    }\r\n\r\n    handleRegisterAttempt(e){\r\n        e.preventDefault();\r\n\t\tif(!!this.state.name && !!this.state.email && !!this.state.username && !!this.state.password){\r\n\t\t\tthis.setState({registered: true});\r\n\t\t}else{\r\n\t\t\tthis.setState({badForm: true})\r\n\t\t}\r\n\t\t//need check all fields are filled out\r\n    }\r\n\r\n    render() {\r\n        return(//obviously needs more added\r\n            <>\r\n                {!this.state.registered && \r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<img src=\"images/Nooth_DnD.png\" width='300' alt=\"logo\"/>\r\n\t\t\t\t\t\t<h1 className=\"title\">\r\n\t\t\t\t\t\t\tSign Up\r\n\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t<form className=\"Form\" onSubmit={this.handleRegisterAttempt}>\r\n\t\t\t\t\t\t\t<label htmlFor=\"fullname\" className=\"tbLabel\">Full Name: \r\n\t\t\t\t\t\t\t<input type=\"name\" id=\"fullname\" name=\"fullname\" required={true} onChange={this.handleNameChange} value={this.state.name}/></label><br/>\r\n\t\t\t\t\t\t\t<label htmlFor=\"email\" className=\"tbLabel\" name=\"tbLabel\">Email: \r\n\t\t\t\t\t\t\t<input type=\"email\" id=\"email\" name=\"email\" required={true} onChange={this.handleEmailChange} value={this.state.email}/></label><br/>\r\n\t\t\t\t\t\t\t<label htmlFor=\"username\" className=\"tbLabel\" name=\"tbLabel\">Username: \r\n\t\t\t\t\t\t\t<input type=\"username\" id=\"username\" name=\"username\" required={true} onChange={this.handleUsernameChange} value={this.state.username}/></label><br/>\r\n\t\t\t\t\t\t\t<label htmlFor=\"password\" className=\"tbLabel\" name=\"tbLabel\">Password: \r\n\t\t\t\t\t\t\t<input type=\"password\" id=\"password\" name=\"password\" required={true} onChange={this.handlePasswordChange} value={this.state.password}/></label><br/>\r\n\t\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\"/>\r\n\t\t\t\t\t\t</form><br/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t\t{this.state.registered && <AddUser name={this.state.name} email={this.state.email} username={this.state.username} password={this.state.password}/>}\r\n\t\t\t\t{this.state.badForm && <p>Please make sure all boxes are filled in</p>/**this check seems redundant with the boxes being marked as required */}\r\n\t\t\t\t<button onClick={this.Registered} name=\"next\" variant=\"outlined\">\r\n\t\t\t\t\tGo back to login\r\n\t\t\t\t</button>\r\n            </>\r\n\t\t)\r\n    }\r\n}\r\n\r\nfunction AddUser(props){\r\n\tconst {data:queryData, loading:queryLoading} = useQuery(getUserID, {variables: {username:props.username, password:props.password}}, {fetchPolicy:'network-only'});//looking for existing user\r\n\tconst [newUser, { data, loading }] = useMutation(addUser);\r\n\twhile (queryLoading||loading) {console.log(\"loading\");return(<p>Loading...</p>)}\r\n\tconsole.log(queryData.getUserID)\r\n\tif(queryData!==undefined){\r\n\t\tif(queryData.getUserID===null && !queryLoading){//apparently here cannot read 'undefined' user, but that same method works in login???\r\n\t\t\tconsole.log(\"user doesn't already exist\")\r\n\t\t\tif(data===undefined){\r\n\t\t\t\tconsole.log(\"adding user\")\r\n\t\t\t\tnewUser({variables:{name:props.name, email:props.email, username:props.username, password:props.password}});\r\n\t\t\t}else if(data!=null){\r\n\t\t\t\tconsole.log(data)\r\n\t\t\t\treturn(<>\r\n\t\t\t\t\t<p>Welcome, {props.name}</p>\r\n\t\t\t\t</>);\r\n\t\t\t}\r\n\t\t}else if(queryData.getUserID!==null && !queryLoading){\r\n\t\t\tconsole.log(\"user already exists\", queryData.getUserID)\r\n\t\t\treturn (\r\n\t\t\t\t<p>Error: User already exists, try again</p>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\treturn <p></p>\r\n}\r\n\r\nexport default Register;","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js",["94"],"import React, { useEffect, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport Register from './Register';\r\nimport {getUserID} from '../queries'\r\n\r\nexport default function Login(props) {\r\n    const [id, setID] = useState(null)\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [registered, toggleRegistered] = useState(true)\r\n    const [stayLoggedIn, setStay] = useState(false)\r\n    const [badLogin, toggleBadLogin] = useState(false)\r\n    const [getID, {data, loading, called}] = useLazyQuery(getUserID, {fetchPolicy:'network-only'})\r\n\r\n    useEffect(()=>{//if the client recieves an id upon request, the user may continue. if not, they are stuck\r\n        if(!loading&&(id!==null)){\r\n            props.handleLogin(id)\r\n        }\r\n        if(!loading && called && id===null){\r\n            if(data!==undefined){\r\n                setID(data.getUserID)\r\n            }else{\r\n                toggleBadLogin(true)\r\n            }\r\n        }\r\n    }, [loading, called, id, data, props])\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n            {registered && //show login form if not logged in\r\n                (<><div><form id=\"Form\" className=\"Form\" onSubmit={(e)=>{e.preventDefault();getID({variables:{username:username, password:password}})}}>\r\n                        <p> Please enter your username and password </p>\r\n                        <label htmlFor=\"user\">Username: \r\n                            <input type=\"username\" name=\"user\" id=\"user\" required={true} autoFocus={true} value={username} onChange={(e)=>{e.preventDefault();setUsername(e.target.value)}}/>\r\n                        </label><br />\r\n                        <label htmlFor=\"pass\">Password: \r\n                            <input type=\"password\" name=\"pass\" id=\"pass\" required={true} value={password} onChange={(e)=>{e.preventDefault();setPassword(e.target.value);}}/>\r\n                        </label><br />\r\n                        <input type=\"submit\" value=\"Submit\" variant=\"outlined\"/>\r\n                        <label htmlFor=\"rememberLogin\"> Remember me\r\n                            <input type=\"checkbox\" id=\"rememberLogin\" name=\"rememberLogin\" value={stayLoggedIn}/>{/*not implemented yet*/}\r\n                        </label>\r\n                    </form>\r\n                    <button name=\"next2\" variant=\"outlined\" onClick={()=>{toggleRegistered(false)}}>\r\n                            register\r\n                    </button>\r\n                </div>\r\n                {badLogin && <p>Could not find a user to match input username and password.</p>}</>)\r\n            }\r\n            {loading && <p>loading...</p>}\r\n            {!registered && <Register Registered={()=>{toggleRegistered(true)}}/>}\r\n        </header>\r\n    )\r\n}\r\n\r\n/* class Login extends React.Component {//old version (class)\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.HandleLogin = this.props.HandleLogin;\r\n        this.SetLogin = this.props.SetLogin;\r\n        this.BadLogin = this.props.BadLogin;\r\n        this.Registered = this.Registered.bind(this);\r\n        this.NotRegistered = this.NotRegistered.bind(this);\r\n        this.handleLoginAttempt = this.handleLoginAttempt.bind(this);\r\n        this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.state = {registered:true, loggedIn: false, username: \"\", password: \"\"};\r\n    }\r\n\r\n    handleUsernameChange(e){\r\n        e.preventDefault(); \r\n        this.setState({username: e.target.value});\r\n        //console.log(this.state.username);\r\n    }\r\n    handlePasswordChange(e){\r\n        e.preventDefault();\r\n        this.setState({password: e.target.value});\r\n        //console.log(this.state.password);\r\n    }\r\n\r\n    handleLoginAttempt(e){//logs the form\r\n        e.preventDefault();\r\n        this.HandleLogin(this.state.username, this.state.password);\r\n        this.setState({loggedIn: true});\r\n        this.SetLogin();\r\n    }\r\n\r\n    NotRegistered(){\r\n        this.setState({registered: false});\r\n    }\r\n\r\n    Registered(){\r\n        this.setState({registered: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                {(!this.state.loggedIn && this.state.registered) && //show login form if not logged in\r\n                    (<div><form id=\"Form\" className=\"Form\" onSubmit={this.handleLoginAttempt}>\r\n                        <p> Please enter your username and password </p>\r\n                        <label htmlFor=\"user\">Username: \r\n                            <input type=\"username\" name=\"user\" id=\"user\" required={true} autoFocus={true} onChange={this.handleUsernameChange} value={this.state.username}/>\r\n                        </label><br />\r\n                        <label htmlFor=\"pass\">Password: \r\n                            <input type=\"password\" name=\"pass\" id=\"pass\" required={true} onChange={this.handlePasswordChange} value={this.state.password}/>\r\n                        </label><br />\r\n                        <input type=\"submit\" value=\"Submit\" variant=\"outlined\"/>\r\n                        <label htmlFor=\"rememberLogin\"> Remember me\r\n                            <input type=\"checkbox\" id=\"rememberLogin\" name=\"rememberLogin\" value={this.state.loggedIn}//not implemented yet, checkbox doesnt even return anything on submit\r\n                        </label>\r\n                    </form>\r\n                    <button name=\"next2\" variant=\"outlined\" onClick={this.NotRegistered}>\r\n                            register\r\n                    </button>\r\n                    {this.BadLogin && <p>Could not find a user to match input username and password.</p>}\r\n                    </div>)\r\n                }\r\n                {(!this.state.registered && !this.state.loggedIn) && <Register Registered={this.Registered}/>}\r\n            </header>\r\n        )\r\n    }\r\n} */","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js",["95"],"import React, { useContext } from 'react';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext';\r\nimport EditCharacter from '../components/characters/EditCharacter'\r\nimport {DisplayCharacters} from '../components/characters/DisplayCharacters'\r\n\r\nexport default class Characters extends React.Component {\r\n\r\n    static contextType = UserContext;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {selected:null, chosen:false, needsRefresh:false, needsSubmit:false}\r\n        this.handleEditSubmit = this.handleEditSubmit.bind(this)\r\n        this.changeSelected = this.changeSelected.bind(this)\r\n        this.clearSelected = this.clearSelected.bind(this)\r\n        this.wantsNew = this.wantsNew.bind(this)\r\n        this.refreshed = this.refreshed.bind(this)\r\n    }\r\n\r\n    handleEditSubmit(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    changeSelected(selected){\r\n        this.setState({selected:selected, chosen:true})\r\n    }\r\n\r\n    clearSelected(){//need to update context\r\n        this.setState({selected:null, chosen:false, needsRefresh:true})\r\n    }\r\n    wantsNew(){\r\n        this.setState({chosen:true})\r\n    }\r\n    refreshed(){\r\n        this.setState({needsRefresh:false})\r\n    }\r\n\r\n    render() {\r\n        const {user} = this.context\r\n        return(\r\n            <>\r\n                <h1 className=\"title\"> Characters </h1>\r\n                {!this.state.chosen && <>\r\n                    <button onClick={this.wantsNew}>New Character</button>\r\n                    <DisplayCharacters needsRefresh={this.state.needsRefresh} refreshed={this.refreshed} changeSelected={this.changeSelected} purpose=\"Edit\"/> \r\n                </>}\r\n                {this.state.chosen && <EditCharacter currentUser={user} characterID={this.state.selected} submit={this.handleEditSubmit} back={this.clearSelected}/>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Play.js",["96","97","98"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useSubscription, Subscription, useQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext'\r\nimport {currentSession, getUserID, onSessionUpdate} from '../queries'\r\nimport {PartyCharacters} from '../components/play/party'\r\nimport { DisplayCharacters } from '../components/characters/DisplayCharacters';\r\n\r\nexport default function Play(props) {\r\n    const {user} = useContext(UserContext)\r\n    const [selected, changeSelected] = useState(null)\r\n    const [needsRefresh, setNeedsRefresh] = useState(false)\r\n    const [needsRefetch, setNeedsRefetch] = useState(true)\r\n\r\n    return (<header className=\"App-header\">\r\n        {selected!==null ? <PlayView sessionID={selected} needsRefetch={needsRefetch} refetched={()=>{setNeedsRefetch(false)}}/> : <DisplayCharacters needsRefresh={needsRefresh} refreshed={()=>{setNeedsRefresh(true)}} changeSelected={changeSelected} purpose=\"Play\"/>}\r\n    </header>)\r\n}\r\n\r\nfunction PlayView(props){\r\n    const{data:queryData, loading:queryLoading, refetch} = useQuery(currentSession, {variables:{id:props.sessionID}})\r\n    const {data:updateData, loading:updateLoading} = useSubscription(onSessionUpdate, {variables:{id:props.sessionID}})\r\n    const [data, changeData] = useState(undefined)\r\n\r\n    useEffect(()=>{\r\n        if(props.needsRefetch){\r\n            refetch()\r\n            props.refetched()\r\n        }\r\n        if(updateData===undefined){\r\n            if(queryLoading){\r\n                console.log(\"loading\")\r\n            }\r\n            if(queryData!==undefined){\r\n                console.log(queryData.session)\r\n                changeData(queryData.session)\r\n            }\r\n        }else{\r\n            console.log(updateData.sessionUpdate)\r\n            changeData(updateData.sessionUpdate)\r\n        }\r\n    }, [queryLoading, queryData, updateLoading, updateData, refetch, props])\r\n\r\n    return (\r\n        <>\r\n            <h2>Play the game</h2>\r\n            {data!==undefined ? <PartyCharacters session={data}/> : <p>No characters in this party.</p>}\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\MyAccount.js",["99","100","101","102","103"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext'\r\nimport {getUserID} from '../queries'\r\n\r\nexport default function MyAccount(props) {\r\n    const {user} = useContext(UserContext)\r\n\r\n    return (\r\n        <>\r\n\r\n        </>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\play\\party.js",["104","105","106"],"import { useMutation } from '@apollo/client'\r\nimport React, { useContext } from 'react'\r\nimport { UserContext } from '../../misc/UserContext'\r\nimport { changeCharacterHealth } from '../../queries'\r\n\r\nexport function PartyCharacters(props){\r\n    const {user} = useContext(UserContext)\r\n    const session = props.session\r\n    const myCharacter = session.characters.map((currentValue, index)=>{if(currentValue.character.user===user._id){return <CharacterInfo key={index} character={currentValue} sessionID={session._id} currentUser={user._id}/>}})\r\n    const partyCharacters = session.characters.map((currentValue, index)=>{if(currentValue.character.user!==user._id){return <CharacterInfo key={index} character={currentValue} sessionID={session._id} currentUser={user._id}/>}})\r\n    return (\r\n        <>\r\n            {myCharacter}\r\n            {(session.characters.length===0) && <p>No characters in this party.</p>}\r\n            {(session.characters.length!==0) && partyCharacters}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CharacterInfo(props){\r\n    const character = props.character.character\r\n    const [changeHealth, {data}] = useMutation(changeCharacterHealth, {variables:{session:props.sessionID, character:props.character._id}})\r\n    return (<div className=\"campaign\">\r\n        <p key=\"c1\" className=\"campaign-name\">{character.name}</p>\r\n        <ul>\r\n            <li key=\"hp\">\r\n                <p>{character.hp}</p>\r\n                {character.user===props.currentUser && <>\r\n                    <button onClick={()=>{changeHealth({variables:{hp:character.hp+1}})}}>+</button>\r\n                    <button onClick={()=>{changeHealth({variables:{hp:character.hp-1}})}}>-</button>\r\n                </>}\r\n            </li>\r\n        </ul>\r\n    </div>)\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\DisplayCampaigns.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\EditCampaign.js",["107"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\Main.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\navbar.js",["108"],"import React from 'react'\r\nimport '../../App.css'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function NavBar(props){\r\n\r\n    const current = window.location.pathname\r\n    \r\n    var home = <Link to=\"/\"  className=\"navLink-home\">\r\n            <h3> DND20 </h3>\r\n        </Link>\r\n    var campaigns =  <Link to=\"/Campaigns\" className=\"navLink\">\r\n            <p> Campaigns </p>\r\n        </Link>\r\n    var characters = <Link to=\"/Characters\" className=\"navLink\">\r\n            <p> Characters </p>\r\n        </Link>\r\n    var play = <Link to=\"/Play\" className=\"navLink\">\r\n            <p> Play </p>\r\n        </Link>\r\n    var account = <Link to=\"/MyAccount\" className=\"navLink\">\r\n            <p> My Account </p>\r\n        </Link>\r\n    var links = [home, campaigns, characters, play, account]\r\n\r\n    //maybe set current page's link's background to different colour\r\n\r\n    return(\r\n        <nav className=\"navbar\">\r\n            {links}\r\n        </nav>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\PageSwitch.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\DisplayCharacters.js",["109","110","111","112","113","114"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\EditCharacter.js",["115"],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":16,"nodeType":"122","messageId":"123","endLine":1,"endColumn":25},{"ruleId":"120","severity":1,"message":"124","line":4,"column":10,"nodeType":"122","messageId":"123","endLine":4,"endColumn":14},{"ruleId":"120","severity":1,"message":"125","line":12,"column":26,"nodeType":"122","messageId":"123","endLine":12,"endColumn":33},{"ruleId":"120","severity":1,"message":"126","line":1,"column":17,"nodeType":"122","messageId":"123","endLine":1,"endColumn":27},{"ruleId":"120","severity":1,"message":"127","line":2,"column":27,"nodeType":"122","messageId":"123","endLine":2,"endColumn":39},{"ruleId":"120","severity":1,"message":"128","line":5,"column":25,"nodeType":"122","messageId":"123","endLine":5,"endColumn":34},{"ruleId":"120","severity":1,"message":"129","line":10,"column":12,"nodeType":"122","messageId":"123","endLine":10,"endColumn":16},{"ruleId":"120","severity":1,"message":"121","line":1,"column":29,"nodeType":"122","messageId":"123","endLine":1,"endColumn":38},{"ruleId":"120","severity":1,"message":"130","line":1,"column":40,"nodeType":"122","messageId":"123","endLine":1,"endColumn":48},{"ruleId":"120","severity":1,"message":"131","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":22},{"ruleId":"120","severity":1,"message":"128","line":5,"column":9,"nodeType":"122","messageId":"123","endLine":5,"endColumn":18},{"ruleId":"120","severity":1,"message":"129","line":8,"column":12,"nodeType":"122","messageId":"123","endLine":8,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":9,"column":69,"nodeType":"134","messageId":"135","endLine":9,"endColumn":71},{"ruleId":"132","severity":1,"message":"133","line":10,"column":73,"nodeType":"134","messageId":"135","endLine":10,"endColumn":75},{"ruleId":"120","severity":1,"message":"136","line":22,"column":27,"nodeType":"122","messageId":"123","endLine":22,"endColumn":31},{"ruleId":"120","severity":1,"message":"137","line":131,"column":10,"nodeType":"122","messageId":"123","endLine":131,"endColumn":23},{"ruleId":"120","severity":1,"message":"138","line":7,"column":11,"nodeType":"122","messageId":"123","endLine":7,"endColumn":18},{"ruleId":"120","severity":1,"message":"139","line":1,"column":10,"nodeType":"122","messageId":"123","endLine":1,"endColumn":18},{"ruleId":"120","severity":1,"message":"140","line":1,"column":33,"nodeType":"122","messageId":"123","endLine":1,"endColumn":48},{"ruleId":"120","severity":1,"message":"121","line":2,"column":28,"nodeType":"122","messageId":"123","endLine":2,"endColumn":37},{"ruleId":"120","severity":1,"message":"141","line":4,"column":10,"nodeType":"122","messageId":"123","endLine":4,"endColumn":26},{"ruleId":"120","severity":1,"message":"142","line":12,"column":33,"nodeType":"122","messageId":"123","endLine":12,"endColumn":50},{"ruleId":"120","severity":1,"message":"143","line":13,"column":34,"nodeType":"122","messageId":"123","endLine":13,"endColumn":48},{"ruleId":"120","severity":1,"message":"144","line":60,"column":18,"nodeType":"122","messageId":"123","endLine":60,"endColumn":28},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'setStay' is assigned a value but never used.","'useContext' is defined but never used.","'Subscription' is defined but never used.","'getUserID' is defined but never used.","'user' is assigned a value but never used.","'useState' is defined but never used.","'useLazyQuery' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'data' is assigned a value but never used.","'LeaveCampaign' is defined but never used.","'current' is assigned a value but never used.","'useQuery' is defined but never used.","'useSubscription' is defined but never used.","'currentSessionID' is defined but never used.","'createSessionData' is assigned a value but never used.","'endSessionData' is assigned a value but never used.","'changePage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]