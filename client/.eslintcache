[{"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\Main.js":"1","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js":"2","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js":"3","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\PageSwitch.js":"4","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\EditCampaign.js":"5","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js":"6","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js":"7","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js":"8","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js":"9","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js":"10","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js":"11","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\navbar.js":"12","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js":"13","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\EditCharacter.js":"14","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js":"15"},{"size":1086,"mtime":1618793383221,"results":"16","hashOfConfig":"17"},{"size":449,"mtime":1618794139984,"results":"18","hashOfConfig":"17"},{"size":5052,"mtime":1618175314443,"results":"19","hashOfConfig":"17"},{"size":777,"mtime":1618174833539,"results":"20","hashOfConfig":"17"},{"size":4587,"mtime":1618525959071,"results":"21","hashOfConfig":"17"},{"size":3736,"mtime":1618790834692,"results":"22","hashOfConfig":"17"},{"size":718,"mtime":1618002469102,"results":"23","hashOfConfig":"17"},{"size":4360,"mtime":1618791218088,"results":"24","hashOfConfig":"17"},{"size":6045,"mtime":1618794074811,"results":"25","hashOfConfig":"17"},{"size":1165,"mtime":1618597192093,"results":"26","hashOfConfig":"17"},{"size":218,"mtime":1618165402070,"results":"27","hashOfConfig":"17"},{"size":930,"mtime":1618174861985,"results":"28","hashOfConfig":"17"},{"size":2899,"mtime":1618479154908,"results":"29","hashOfConfig":"17"},{"size":10426,"mtime":1618595446508,"results":"30","hashOfConfig":"17"},{"size":849,"mtime":1618539137247,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t3che4",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\Main.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js",[],["66","67"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\PageSwitch.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\EditCampaign.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js",["68"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\navbar.js",["69"],"import React from 'react'\r\nimport '../App.css'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function NavBar(props){\r\n\r\n    const current = window.location.pathname\r\n    \r\n    var home = <Link to=\"/\"  className=\"navLink-home\">\r\n            <h3> DND20 </h3>\r\n        </Link>\r\n    var campaigns =  <Link to=\"/Campaigns\" className=\"navLink\">\r\n            <p> Campaigns </p>\r\n        </Link>\r\n    var characters = <Link to=\"/Characters\" className=\"navLink\">\r\n            <p> Characters </p>\r\n        </Link>\r\n    var play = <Link className=\"navLink\">\r\n            <p> Play </p>\r\n        </Link>\r\n    var account = <Link className=\"navLink\">\r\n            <p> My Account </p>\r\n        </Link>\r\n    var links = [home, campaigns, characters, play, account]\r\n\r\n    //maybe set current page's link's background to different colour\r\n\r\n    return(\r\n        <nav className=\"navbar\">\r\n            {links}\r\n        </nav>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js",["70"],"import React, { useContext } from 'react';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext';\r\nimport EditCharacter from '../components/EditCharacter'\r\n\r\nexport default class Characters extends React.Component {\r\n\r\n    static contextType = UserContext;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {selected:null, chosen:false, needsRefresh:false, needsSubmit:false}\r\n        this.handleEditSubmit = this.handleEditSubmit.bind(this)\r\n        this.changeSelected = this.changeSelected.bind(this)\r\n        this.clearSelected = this.clearSelected.bind(this)\r\n        this.wantsNew = this.wantsNew.bind(this)\r\n        this.refreshed = this.refreshed.bind(this)\r\n    }\r\n\r\n    handleEditSubmit(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    changeSelected(selected){\r\n        this.setState({selected:selected, chosen:true})\r\n    }\r\n\r\n    clearSelected(){//need to update context\r\n        this.setState({selected:null, chosen:false, needsRefresh:true})\r\n    }\r\n    wantsNew(){\r\n        this.setState({chosen:true})\r\n    }\r\n    refreshed(){\r\n        this.setState({needsRefresh:false})\r\n    }\r\n\r\n    render() {\r\n        const {user} = this.context\r\n        return(\r\n            <>\r\n                <h1 className=\"title\"> Characters </h1>\r\n                {!this.state.chosen && <>\r\n                    <button onClick={this.wantsNew}>New Character</button>\r\n                    <DisplayCharacters needsRefresh={this.state.needsRefresh} refreshed={this.refreshed} changeSelected={this.changeSelected}/> \r\n                </>}\r\n                {this.state.chosen && <EditCharacter currentUser={user} characterID={this.state.selected} submit={this.handleEditSubmit} back={this.clearSelected}/>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction DisplayCharacters(props){//need to render the Campaign function for as many as there are in campaigns collection\r\n    const {user, refreshUser} = useContext(UserContext)\r\n    if(props.needsRefresh){\r\n        refreshUser()\r\n        props.refreshed()\r\n    }\r\n    const characterList = []\r\n    for (let i = 0; i<user.characters.length; i++){//adds jsx elemnts to the array\r\n        characterList.push(<Character character={user.characters[i]} changeSelected={props.changeSelected}/>)\r\n    }\r\n    return (\r\n        <div>\r\n            {(user.characters.length===0) && <p>You do not currently have any characters.</p>}\r\n            {(user.campaigns.length!==0) && characterList}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Character(props){\r\n    return (\r\n        <div className=\"character\">\r\n            <p key=\"c1\" className=\"characer-name\">{props.character.name}</p>\r\n            <ul><li key=\"editButton\">\r\n                <button onClick={() => props.changeSelected(props.character._id)}>\r\n                    Edit\r\n                </button>\r\n            </li></ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction SubmitNew(){\r\n    \r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\EditCharacter.js",["71","72"],"import React, {useContext, useState} from 'react'\r\nimport {useQuery, useMutation} from '@apollo/client'\r\nimport '../App.css'\r\nimport {addCharacter, deleteCharacter, getCharacter, getClasses, getRaces, updateCharacterInfo, updateCharacterStats} from '../queries'\r\nimport { arrayToOptions } from '../functions/GeneralFunctions'\r\nimport { UserContext } from '../misc/UserContext'\r\n\r\nexport default class EditCharacter extends React.Component {\r\n\r\n    static contextType = UserContext\r\n\r\n    constructor(props){\r\n        super(props)\r\n        this.user = this.props.currentUser\r\n        this.characterID = this.props.characterID\r\n        this.returnLoaded = this.returnLoaded.bind(this)\r\n        this.submittedNew = this.submittedNew.bind(this)\r\n        this.state = {character:null, submitNew:false, submitGeneral:false, name:\"\", race:\"\", bg:\"\", campaign:\"\"}\r\n    }\r\n\r\n    returnLoaded(character){\r\n        this.setState({character:character})\r\n    }\r\n\r\n    submittedNew(){\r\n        this.setState({submitNew:false, name:\"\", race:\"\", bg:\"\", campaign:\"\"})\r\n        this.props.back()\r\n    }\r\n\r\n    render(){\r\n        console.log(this.state.name, this.state.race, this.state.campaign, this.state.bg)\r\n        return(<>\r\n            <button className=\"backButton\" onClick={this.props.back}>Back</button>{/* vvv unloaded and unentered*/}\r\n            {/* ((this.characterID!==null)&&(this.state.character===null)) ? <LoadCharacter ID={this.characterID} return={this.returnLoaded}/> : <CharacterInfo submitNewGeneral={this.submitNewGeneral} user={this.user} character={this.state.character} new={this.state.character===null}/> */}\r\n            <CharacterInfo submitNew={this.submitNew} submitGeneral={this.submitGeneral} user={this.user} character={this.state.character} new={this.state.character===null} back={this.props.back}/>\r\n            {((this.characterID!==null)&&(this.state.character===null)) && <LoadCharacter ID={this.characterID} return={this.returnLoaded}/>}\r\n        </>)\r\n    }\r\n}\r\n\r\nfunction LoadCharacter(props){\r\n    console.log(props.ID)\r\n    const {loading, data, error} = useQuery(getCharacter, {variables:{id:props.ID}, fetchPolicy:'network-only'})\r\n    while(loading){\r\n        return(<p>loading...</p>)\r\n    }\r\n    if(error){//no need to print errors here, as they wont. just if data && data.variable\r\n        console.log(error)\r\n        return(<p></p>)\r\n    }else{\r\n        console.log(data)\r\n        props.return(data.character)\r\n        return(<p>done</p>)\r\n    }\r\n}\r\n\r\nfunction DeleteCharacter(props){\r\n    const [del, {loading, data}] = useMutation(deleteCharacter)\r\n    while(loading){\r\n        return(<p>loading...</p>)\r\n    }\r\n    if(data===undefined){\r\n        del({variables:{character:props.characterID, user:props.userID, campaign:props.campaignID}})\r\n    }else if(data!==null){\r\n        props.back()\r\n    }return null\r\n}\r\n\r\nfunction CharacterInfo(props){\r\n    console.log('character info', props.new)\r\n    const {loading:raceLoading, data:raceData} = useQuery(getRaces)\r\n    const {loading:classLoading, data:classData} = useQuery(getClasses)\r\n    const [page, changePage] = useState(0)\r\n    while(classLoading||raceLoading){\r\n        return(<p>Loading...</p>)\r\n    }\r\n    let pages = [\r\n        (props.new ? <NewGeneralInfo races={raceData.races} user={props.user} submit={props.submitNew} back={props.back}/> : <ExistingGeneralInfo character={props.character} classes={classData.classes} submit={props.submitGeneral} back={props.back}/>),\r\n    ]\r\n    pages.forEach(element => {\r\n        if(element!==pages[page]){\r\n            element = null\r\n        }\r\n    })\r\n    //make a set of buttons to change page with the index of the pages array\r\n    return (<div>\r\n        {pages}\r\n    </div>)\r\n}\r\n\r\nfunction NewGeneralInfo(props){\r\n    const {user} = useContext(UserContext)\r\n    const [name, changeName] = useState(\"\")\r\n    const [background, changeBG] = useState(\"\")\r\n    const [race, changeRace] = useState(\"\")\r\n    const [campaign, changeCampaign] = useState(\"\")\r\n    const [createNew, {loading:newLoading, data:newData}] = useMutation(addCharacter, {variables:{user:user._id, campaign:campaign, name:name, race:race, background:background}})\r\n    while(newLoading){\r\n        return(<p>Loading...</p>)\r\n    }\r\n    if(newData!==undefined){\r\n        props.back()\r\n    }\r\n    return (<form onSubmit={createNew}>\r\n        <input type=\"submit\" /><br/>\r\n        <label htmlFor=\"name\" className=\"tbLabel\">Name: \r\n        <input type=\"name\" id=\"name\" name=\"name\" required={true} onChange={(e)=>{e.preventDefault();changeName(e.target.value)}} value={name}/></label>\r\n        <CampaignSelect id=\"campaign\" campaigns={user.campaigns} changeCampaign={changeCampaign}/><br/>\r\n        <label htmlFor=\"bg\" className=\"tbLabel\">Background Info / Lore: \r\n        <textarea id=\"bg\" name=\"bg\" onChange={(e)=>{e.preventDefault();changeBG(e.target.value)}} value={background} rows=\"4\" cols=\"50\" maxLength=\"500\"/></label><br/>\r\n        <RaceSelect id=\"race\" races={props.races} changeRace={changeRace}/><br/>\r\n    </form>)\r\n}\r\n\r\nfunction ExistingGeneralInfo(props){\r\n    const {user} = useContext(UserContext)\r\n    const character = props.character\r\n    const [campaign, changeCampaign] = useState(character.campaign)\r\n    const [charClass, changeClass] = useState(character.class)\r\n    const [str, changeStr] = useState(character.str)\r\n    const [dex, changeDex] = useState(character.dex)\r\n    const [con, changeCon] = useState(character.con)\r\n    const [int, changeInt] = useState(character.int)\r\n    const [wis, changeWis] = useState(character.wis)\r\n    const [cha, changeCha] = useState(character.cha)//need to implement for maximum levels etc, although maybe later\r\n    console.log(charClass)\r\n    const [rename, toggleRename] = useState(false)\r\n    const [name, changeName] = useState(character.name)\r\n    const [delCharacter, {loading:delLoading, data:delData}] = useMutation(deleteCharacter, {variables:{character:character._id, user:character.user, campaign:character.campaign}})\r\n    const [updateInfo, {loading:infoLoading, data:infoData}] = useMutation(updateCharacterInfo, {variables:{id:character._id, name:name, campaign:campaign}})\r\n    const [updateStats, {loading:statsLoading, data:statsData}] = useMutation(updateCharacterStats, {variables:{id:character._id, class:charClass, cha:parseInt(cha), con:parseInt(con), str:parseInt(str), dex:parseInt(dex), int:parseInt(int), wis:parseInt(wis)}})\r\n    while(delLoading||infoLoading||statsLoading){\r\n        if(delLoading){\r\n            console.log(character._id, character.user, character.campaign)\r\n        }\r\n        return(<p>loading</p>)\r\n    }\r\n    if(delData!==undefined||infoData!==undefined||statsData!==undefined){\r\n        props.back()\r\n    }\r\n    return (<><div><h2>{character.name}</h2>\r\n        <button onClick={delCharacter}>Delete Character</button></div>\r\n        {rename ? <>\r\n            <form onSubmit={updateInfo}>\r\n                <label htmlFor=\"name\" className=\"tbLabel\">Name: \r\n                <input type=\"text\" id=\"name\" name=\"name\" required={true} onChange={(e)=>{e.preventDefault();changeName(e.target.value)}} value={name}/></label>\r\n                <CampaignSelect id=\"campaign\" current={campaign} campaigns={user.campaigns} changeCampaign={changeCampaign}/>\r\n                <input type=\"submit\"/><button onClick={()=>{toggleRename(!rename)}}>Cancel</button>\r\n            </form>\r\n        </> : <><button onClick={()=>{toggleRename(!rename)}}>Rename/ChangeCampaign</button><br/></>}\r\n        <form onSubmit={updateStats}>\r\n            <input type=\"submit\" /><br/>\r\n            <ClassSelect id=\"class\" current={charClass} classes={props.classes} changeClass={changeClass}/><br/>\r\n            <label htmlFor=\"str\" className=\"tbLabel\">Str: \r\n            <input type=\"number\" id=\"str\" name=\"str\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeStr(e.target.value)}} value={str}/></label>\r\n            <label htmlFor=\"dex\" className=\"tbLabel\">Dex: \r\n            <input type=\"number\" id=\"dex\" name=\"dex\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeDex(e.target.value)}} value={dex}/></label>\r\n            <label htmlFor=\"con\" className=\"tbLabel\">Con: \r\n            <input type=\"number\" id=\"con\" name=\"con\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeCon(e.target.value)}} value={con}/></label>\r\n            <label htmlFor=\"int\" className=\"tbLabel\">Int: \r\n            <input type=\"number\" id=\"int\" name=\"int\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeInt(e.target.value)}} value={int}/></label>\r\n            <label htmlFor=\"wis\" className=\"tbLabel\">Wis: \r\n            <input type=\"number\" id=\"wis\" name=\"wis\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeWis(e.target.value)}} value={wis}/></label>\r\n            <label htmlFor=\"cha\" className=\"tbLabel\">Cha: \r\n            <input type=\"number\" id=\"cha\" name=\"cha\" min=\"1\" max=\"20\" required={true} onChange={(e)=>{e.preventDefault();changeCha(e.target.value)}} value={cha}/></label>\r\n        </form>\r\n    </>)\r\n}\r\n\r\nfunction ClassSelect(props){\r\n    let classOptions = arrayToOptions(props.classes, props.current)\r\n    return(\r\n        <label htmlFor=\"class\" className=\"tbLabel\">Class:\r\n            <select id=\"classes\" name=\"classes\" onChange={(e)=>{props.changeClass(props.classes[e.target.selectedIndex].index)}}>\r\n                {classOptions}\r\n            </select>\r\n        </label>\r\n    )\r\n}\r\n\r\nfunction RaceSelect(props){\r\n    const [selected, changeSelected] = useState(0)\r\n    let raceOptions = arrayToOptions(props.races)\r\n    return(\r\n        <div><label htmlFor=\"races\" className=\"tbLabel\">Race:\r\n            <select id=\"races\" name=\"races\" onChange={(e)=>{props.changeRace(props.races[e.target.selectedIndex].index); changeSelected(e.target.selectedIndex)}}>\r\n                {raceOptions}\r\n            </select></label>\r\n            <p>{props.races[selected].alignment}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CampaignSelect(props){\r\n    const campaignOptions = arrayToOptions(props.campaigns, props.current)\r\n    return(<>\r\n        <label htmlFor=\"campaigns\" className=\"tbLabel\">Campaign:\r\n            <select id=\"campaigns\" name=\"campaigns\" onChange={(e)=>{props.changeCampaign(props.campaigns[e.target.selectedIndex]._id)}}>\r\n                {campaignOptions}\r\n            </select>\r\n        </label>\r\n    </>)\r\n}\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js",[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":12,"column":26,"nodeType":"79","messageId":"80","endLine":12,"endColumn":33},{"ruleId":"77","severity":1,"message":"81","line":7,"column":11,"nodeType":"79","messageId":"80","endLine":7,"endColumn":18},{"ruleId":"77","severity":1,"message":"82","line":84,"column":10,"nodeType":"79","messageId":"80","endLine":84,"endColumn":19},{"ruleId":"77","severity":1,"message":"83","line":57,"column":10,"nodeType":"79","messageId":"80","endLine":57,"endColumn":25},{"ruleId":"77","severity":1,"message":"84","line":73,"column":18,"nodeType":"79","messageId":"80","endLine":73,"endColumn":28},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'setStay' is assigned a value but never used.","Identifier","unusedVar","'current' is assigned a value but never used.","'SubmitNew' is defined but never used.","'DeleteCharacter' is defined but never used.","'changePage' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]