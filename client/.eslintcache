[{"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js":"1","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js":"2","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js":"3","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js":"4","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js":"5","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js":"6","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js":"7","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js":"8","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js":"9","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js":"10","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Play.js":"11","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\MyAccount.js":"12","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\play\\party.js":"13","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\DisplayCampaigns.js":"14","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\EditCampaign.js":"15","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\Main.js":"16","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\navbar.js":"17","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\PageSwitch.js":"18","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\DisplayCharacters.js":"19","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\EditCharacter.js":"20","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\CharacterCreation.js":"21"},{"size":452,"mtime":1624141143175,"results":"22","hashOfConfig":"23"},{"size":3858,"mtime":1626375852049,"results":"24","hashOfConfig":"23"},{"size":7141,"mtime":1626390763473,"results":"25","hashOfConfig":"23"},{"size":718,"mtime":1624565761116,"results":"26","hashOfConfig":"23"},{"size":4460,"mtime":1626390529658,"results":"27","hashOfConfig":"23"},{"size":5969,"mtime":1618869143191,"results":"28","hashOfConfig":"23"},{"size":1731,"mtime":1624979601528,"results":"29","hashOfConfig":"23"},{"size":155,"mtime":1619471437226,"results":"30","hashOfConfig":"23"},{"size":1875,"mtime":1619378314358,"results":"31","hashOfConfig":"23"},{"size":549,"mtime":1621557561124,"results":"32","hashOfConfig":"23"},{"size":2251,"mtime":1625087510716,"results":"33","hashOfConfig":"23"},{"size":660,"mtime":1625852063703,"results":"34","hashOfConfig":"23"},{"size":1456,"mtime":1625946760972,"results":"35","hashOfConfig":"23"},{"size":1225,"mtime":1626391469144,"results":"36","hashOfConfig":"23"},{"size":6917,"mtime":1626392078191,"results":"37","hashOfConfig":"23"},{"size":1093,"mtime":1619471451810,"results":"38","hashOfConfig":"23"},{"size":2047,"mtime":1626297727473,"results":"39","hashOfConfig":"23"},{"size":1007,"mtime":1619209471715,"results":"40","hashOfConfig":"23"},{"size":2905,"mtime":1625951784969,"results":"41","hashOfConfig":"23"},{"size":14808,"mtime":1626392745311,"results":"42","hashOfConfig":"23"},{"size":964,"mtime":1624882816343,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"t3che4",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\App.js",[],["95","96"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Campaigns.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\queries.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Home.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Register.js",["97","98","99"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Login.js",["100"],"import React, { useEffect, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport Register from './Register';\r\nimport {getUserID} from '../queries'\r\n\r\nexport default function Login(props) {\r\n    const [id, setID] = useState(null)\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [registered, toggleRegistered] = useState(true)\r\n    const [stayLoggedIn, setStay] = useState(false)\r\n    const [badLogin, toggleBadLogin] = useState(false)\r\n    const [getID, {data, loading, called}] = useLazyQuery(getUserID, {fetchPolicy:'network-only'})\r\n\r\n    useEffect(()=>{//if the client recieves an id upon request, the user may continue. if not, they are stuck\r\n        if(!loading&&(id!==null)){\r\n            props.handleLogin(id)\r\n        }\r\n        if(!loading && called && id===null){\r\n            if(data!==undefined){\r\n                setID(data.getUserID)\r\n            }else{\r\n                toggleBadLogin(true)\r\n            }\r\n        }\r\n    }, [loading, called, id, data, props])\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n            {registered && //show login form if not logged in\r\n                (<><div><form id=\"Form\" className=\"Form\" onSubmit={(e)=>{e.preventDefault();getID({variables:{username:username, password:password}})}}>\r\n                        <p> Please enter your username and password </p>\r\n                        <label htmlFor=\"user\">Username: \r\n                            <input type=\"username\" name=\"user\" id=\"user\" required={true} autoFocus={true} value={username} onChange={(e)=>{e.preventDefault();setUsername(e.target.value)}}/>\r\n                        </label><br />\r\n                        <label htmlFor=\"pass\">Password: \r\n                            <input type=\"password\" name=\"pass\" id=\"pass\" required={true} value={password} onChange={(e)=>{e.preventDefault();setPassword(e.target.value);}}/>\r\n                        </label><br />\r\n                        <input type=\"submit\" value=\"Submit\" variant=\"outlined\"/>\r\n                        <label htmlFor=\"rememberLogin\"> Remember me\r\n                            <input type=\"checkbox\" id=\"rememberLogin\" name=\"rememberLogin\" value={stayLoggedIn}/>{/*not implemented yet*/}\r\n                        </label>\r\n                    </form>\r\n                    <button name=\"next2\" variant=\"outlined\" onClick={()=>{toggleRegistered(false)}}>\r\n                            register\r\n                    </button>\r\n                </div>\r\n                {badLogin && <p>Could not find a user to match input username and password.</p>}</>)\r\n            }\r\n            {loading && <p>loading...</p>}\r\n            {!registered && <Register Registered={()=>{toggleRegistered(true)}}/>}\r\n        </header>\r\n    )\r\n}\r\n\r\n/* class Login extends React.Component {//old version (class)\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.HandleLogin = this.props.HandleLogin;\r\n        this.SetLogin = this.props.SetLogin;\r\n        this.BadLogin = this.props.BadLogin;\r\n        this.Registered = this.Registered.bind(this);\r\n        this.NotRegistered = this.NotRegistered.bind(this);\r\n        this.handleLoginAttempt = this.handleLoginAttempt.bind(this);\r\n        this.handleUsernameChange = this.handleUsernameChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.state = {registered:true, loggedIn: false, username: \"\", password: \"\"};\r\n    }\r\n\r\n    handleUsernameChange(e){\r\n        e.preventDefault(); \r\n        this.setState({username: e.target.value});\r\n        //console.log(this.state.username);\r\n    }\r\n    handlePasswordChange(e){\r\n        e.preventDefault();\r\n        this.setState({password: e.target.value});\r\n        //console.log(this.state.password);\r\n    }\r\n\r\n    handleLoginAttempt(e){//logs the form\r\n        e.preventDefault();\r\n        this.HandleLogin(this.state.username, this.state.password);\r\n        this.setState({loggedIn: true});\r\n        this.SetLogin();\r\n    }\r\n\r\n    NotRegistered(){\r\n        this.setState({registered: false});\r\n    }\r\n\r\n    Registered(){\r\n        this.setState({registered: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                {(!this.state.loggedIn && this.state.registered) && //show login form if not logged in\r\n                    (<div><form id=\"Form\" className=\"Form\" onSubmit={this.handleLoginAttempt}>\r\n                        <p> Please enter your username and password </p>\r\n                        <label htmlFor=\"user\">Username: \r\n                            <input type=\"username\" name=\"user\" id=\"user\" required={true} autoFocus={true} onChange={this.handleUsernameChange} value={this.state.username}/>\r\n                        </label><br />\r\n                        <label htmlFor=\"pass\">Password: \r\n                            <input type=\"password\" name=\"pass\" id=\"pass\" required={true} onChange={this.handlePasswordChange} value={this.state.password}/>\r\n                        </label><br />\r\n                        <input type=\"submit\" value=\"Submit\" variant=\"outlined\"/>\r\n                        <label htmlFor=\"rememberLogin\"> Remember me\r\n                            <input type=\"checkbox\" id=\"rememberLogin\" name=\"rememberLogin\" value={this.state.loggedIn}//not implemented yet, checkbox doesnt even return anything on submit\r\n                        </label>\r\n                    </form>\r\n                    <button name=\"next2\" variant=\"outlined\" onClick={this.NotRegistered}>\r\n                            register\r\n                    </button>\r\n                    {this.BadLogin && <p>Could not find a user to match input username and password.</p>}\r\n                    </div>)\r\n                }\r\n                {(!this.state.registered && !this.state.loggedIn) && <Register Registered={this.Registered}/>}\r\n            </header>\r\n        )\r\n    }\r\n} */","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\index.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\misc\\UserContext.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Characters.js",["101"],"import React, { useContext } from 'react';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext';\r\nimport EditCharacter from '../components/characters/EditCharacter'\r\nimport {DisplayCharacters} from '../components/characters/DisplayCharacters'\r\n\r\nexport default class Characters extends React.Component {\r\n\r\n    static contextType = UserContext;\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {selected:null, chosen:false, needsRefresh:false, needsSubmit:false}\r\n        this.handleEditSubmit = this.handleEditSubmit.bind(this)\r\n        this.changeSelected = this.changeSelected.bind(this)\r\n        this.clearSelected = this.clearSelected.bind(this)\r\n        this.wantsNew = this.wantsNew.bind(this)\r\n        this.refreshed = this.refreshed.bind(this)\r\n    }\r\n\r\n    handleEditSubmit(e){\r\n        e.preventDefault();\r\n    }\r\n\r\n    changeSelected(selected){\r\n        this.setState({selected:selected, chosen:true})\r\n    }\r\n\r\n    clearSelected(){//need to update context\r\n        this.setState({selected:null, chosen:false, needsRefresh:true})\r\n    }\r\n    wantsNew(){\r\n        this.setState({chosen:true})\r\n    }\r\n    refreshed(){\r\n        this.setState({needsRefresh:false})\r\n    }\r\n\r\n    render() {\r\n        const {user} = this.context\r\n        return(\r\n            <>\r\n                <h1 className=\"title\"> Characters </h1>\r\n                {!this.state.chosen && <>\r\n                    <button onClick={this.wantsNew}>New Character</button>\r\n                    <DisplayCharacters needsRefresh={this.state.needsRefresh} refreshed={this.refreshed} changeSelected={this.changeSelected} purpose=\"Edit\"/> \r\n                </>}\r\n                {this.state.chosen && <EditCharacter currentUser={user} characterID={this.state.selected} submit={this.handleEditSubmit} back={this.clearSelected}/>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\GeneralFunctions.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\Play.js",["102","103","104"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useSubscription, Subscription, useQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext'\r\nimport {currentSession, getUserID, onSessionUpdate} from '../queries'\r\nimport {PartyCharacters} from '../components/play/party'\r\nimport { DisplayCharacters } from '../components/characters/DisplayCharacters';\r\n\r\nexport default function Play(props) {\r\n    const {user} = useContext(UserContext)\r\n    const [selected, changeSelected] = useState(null)\r\n    const [needsRefresh, setNeedsRefresh] = useState(false)\r\n    const [needsRefetch, setNeedsRefetch] = useState(true)\r\n\r\n    return (<header className=\"App-header\">\r\n        {selected!==null ? <PlayView sessionID={selected} needsRefetch={needsRefetch} refetched={()=>{setNeedsRefetch(false)}}/> : <DisplayCharacters needsRefresh={needsRefresh} refreshed={()=>{setNeedsRefresh(true)}} changeSelected={changeSelected} purpose=\"Play\"/>}\r\n    </header>)\r\n}\r\n\r\nfunction PlayView(props){\r\n    const {data:queryData, loading:queryLoading, refetch} = useQuery(currentSession, {variables:{id:props.sessionID}})\r\n    const {data:updateData, loading:updateLoading} = useSubscription(onSessionUpdate, {variables:{id:props.sessionID}})\r\n    const [data, changeData] = useState(undefined)\r\n\r\n    useEffect(()=>{\r\n        if(props.needsRefetch){\r\n            refetch()\r\n            props.refetched()\r\n        }\r\n        if(updateData===undefined){\r\n            if(queryLoading){\r\n                console.log(\"loading\")\r\n            }\r\n            if(queryData!==undefined){\r\n                console.log(queryData.session)\r\n                changeData(queryData.session)\r\n            }\r\n        }else{\r\n            console.log(updateData.sessionUpdate)\r\n            changeData(updateData.sessionUpdate)\r\n        }\r\n    }, [queryLoading, queryData, updateLoading, updateData, refetch, props])\r\n\r\n    return (\r\n        <>\r\n            <h2>Play the game</h2>\r\n            {data!==undefined ? \r\n                <div className=\"play\">\r\n                    <PartyCharacters session={data}/>\r\n                </div>\r\n                : <p>No characters in this party.</p>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\pages\\MyAccount.js",["105","106","107","108"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport '../App.css';\r\nimport {UserContext} from '../misc/UserContext'\r\nimport {getUserID} from '../queries'\r\n\r\nexport default function MyAccount(props) {\r\n    const {user} = useContext(UserContext)\r\n    return (\r\n        <>\r\n            <div>Name: {user.name}</div>\r\n            <div>Username: {user.username}</div>\r\n            <div>Campaigns participated in: {user.campaigns.length} (DM of {user.campaigns.filter(current => current.dm===user._id).length})</div>\r\n            <div>Characters: {user.characters.length}</div>\r\n        </>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\play\\party.js",["109"],"import { useMutation } from '@apollo/client'\r\nimport React, { useContext } from 'react'\r\nimport { UserContext } from '../../misc/UserContext'\r\nimport { changeCharacterHealth } from '../../queries'\r\n\r\nexport function PartyCharacters(props){\r\n    const {user} = useContext(UserContext)\r\n    const session = props.session\r\n    const partyCharacters = session.characters.map((currentValue, index)=>{return <CharacterInfo key={index} character={currentValue} sessionID={session._id} currentUser={user._id}/>})\r\n    return (\r\n        <>\r\n            {(session.characters.length===0) && <p>No characters in this party.</p>}\r\n            {(session.characters.length!==0) && partyCharacters}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction CharacterInfo(props){\r\n    const character = props.character.character\r\n    const [changeHealth, {data}] = useMutation(changeCharacterHealth, {variables:{session:props.sessionID, character:props.character._id}})\r\n    return (<div className=\"campaign\">\r\n        <p key=\"c1\" className=\"campaign-name\">{character.name}</p>\r\n        <ul>\r\n            <li key=\"hp\">\r\n                <p>{character.hp}</p>\r\n                {character.user._id===props.currentUser && <>\r\n                    <button onClick={()=>{changeHealth({variables:{hp:character.hp+1}})}}>+</button>\r\n                    <button onClick={()=>{changeHealth({variables:{hp:character.hp-1}})}}>-</button>\r\n                </>}\r\n            </li>\r\n        </ul>\r\n    </div>)\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\DisplayCampaigns.js",["110"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\campaigns\\EditCampaign.js",["111","112","113","114","115"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\Main.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\navbar.js",["116"],"import React, { useState } from 'react'\r\nimport '../../App.css'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function NavBar(props){\r\n\r\n    const current = window.location.pathname\r\n\r\n    const [night, toggleNight] = useState(false)\r\n    const [buttonText, changeButtonText] = useState(\"D\")\r\n    const style = document.querySelector(':root').style\r\n    var toggleNightMode = <span className=\"nav-button\"><button onClick={()=>{\r\n        if(night){\r\n            style.setProperty('--bg-primary', 'var(--bg-day)')\r\n            style.setProperty('--navTextColour', '#e6e6e6')\r\n            toggleNight(false)\r\n            changeButtonText(\"D\")\r\n        }else{\r\n            style.setProperty('--bg-primary', 'var(--bg-night)')\r\n            style.setProperty('--navTextColour', '#e6e6e6')\r\n            toggleNight(true)\r\n            changeButtonText(\"N\")\r\n        }\r\n    }} className=\"nav-link\">{buttonText}</button></span>\r\n    \r\n    var home = <li className=\"nav-title\"><Link to=\"/\" className=\"nav-link\">\r\n            <span className=\"nav-title-text\"> DND20 </span>\r\n        </Link></li>\r\n    var campaigns =  <li className=\"nav-item\"><Link to=\"/Campaigns\" className=\"nav-link\">\r\n            <span className=\"nav-text\"> Campaigns </span>\r\n        </Link></li>\r\n    var characters = <li className=\"nav-item\"><Link to=\"/Characters\" className=\"nav-link\">\r\n            <span className=\"nav-text\"> Characters </span>\r\n        </Link></li>\r\n    var play = <li className=\"nav-item\"><Link to=\"/Play\" className=\"nav-link\">\r\n           <span className=\"nav-text\"> Play </span>\r\n        </Link></li>\r\n    var account = <li className=\"nav-item\"><Link to=\"/MyAccount\" className=\"nav-link\">\r\n            <span className=\"nav-text\"> My Account </span>\r\n        </Link></li>\r\n    var links = [home, campaigns, characters, play, account, toggleNightMode]\r\n\r\n    //maybe set current page's link's background to different colour\r\n\r\n    return(\r\n        <nav className=\"navbar\">\r\n            <ul className=\"navbar-nav\">{links}</ul>\r\n        </nav>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\main\\PageSwitch.js",[],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\DisplayCharacters.js",["117","118","119","120","121","122"],"import { useQuery, useMutation, useSubscription } from '@apollo/client'\r\nimport React, {useContext, useEffect} from 'react'\r\nimport {UserContext} from '../../misc/UserContext'\r\nimport { currentSessionID, createSession, endSession } from '../../queries'\r\n\r\nexport function DisplayCharacters(props){//need to render the Campaign function for as many as there are in campaigns collection\r\n    const {user, refreshUser} = useContext(UserContext)\r\n    if(props.needsRefresh){\r\n        refreshUser()\r\n        props.refreshed()\r\n    }\r\n    const [startSession, {data: createSessionData}] = useMutation(createSession)\r\n    const [finishSession, {data: endSessionData}] = useMutation(endSession)\r\n    const currentUser = user\r\n    const characterList = currentUser.characters.map((currentValue, index)=>{//doesn't render if user doesn't have campaign\r\n        var cam = currentUser.campaigns.find(element => element._id===currentValue.campaign)\r\n        return <Character key={index} character={currentValue} changeSelected={props.changeSelected} purpose={props.purpose} currentUser={user} campaign={cam}/>\r\n    })\r\n    if(props.purpose===\"Play\"){\r\n        characterList.push(currentUser.campaigns.map(element=>{\r\n            return (<>\r\n                {user._id===element.dm && element.currentSession===null && \r\n                    <button onClick={() => startSession({variables:{campaign:element._id, user:user._id}})}>\r\n                        Begin {element.name}\r\n                    </button>\r\n                }\r\n                {user._id===element.dm && element.currentSession!==null && \r\n                    <button onClick={() => finishSession({variables:{campaign:element._id, user:user._id}})}>\r\n                        End {element.name} session\r\n                    </button>\r\n                }\r\n            </>)\r\n        }))\r\n    }\r\n    return (\r\n        <div>\r\n            {props.purpose===\"Play\" && <button onClick={()=>{refreshUser()}}>Refresh</button>}\r\n            {(user.characters.length===0) && <p>You do not currently have any characters.</p>}\r\n            {(user.campaigns.length!==0) && characterList}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Character(props){\r\n        console.log(props.campaign)\r\n    return (\r\n        <div className=\"character\">\r\n            <p key=\"c1\" className=\"character-name\">{props.character.name}</p>\r\n            <ul>\r\n                <li key=\"mainButton\">\r\n                    {props.purpose===\"Edit\" && <button onClick={() => props.changeSelected(props.character._id)}>\r\n                        Edit\r\n                    </button>}\r\n                    {((props.purpose===\"Play\" && props.campaign!==undefined) && props.campaign.currentSession!==null) && <button onClick={() => props.changeSelected(props.campaign.currentSession)}>\r\n                        Play\r\n                    </button>}\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}","C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\components\\characters\\EditCharacter.js",["123","124"],"C:\\Users\\natha\\Documents\\Projects\\dnd20\\client\\src\\functions\\CharacterCreation.js",["125"],"export function levelsAreBalanced(levels){//input an array [str, dex, con, int, wis, cha]\r\n    return (0 <= getRemainingLevelPoints(levels) && getRemainingLevelPoints(levels) <= 25) ? true : false\r\n}\r\n\r\nexport function getRemainingLevelPoints(levels){\r\n    let remaining = 25\r\n    levels.map((value)=>{\r\n        switch(value) {\r\n            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14:\r\n                remaining -= (value - 8)\r\n                break\r\n            case 15:\r\n                remaining -= 8\r\n                break\r\n            case 16:\r\n                remaining -= 10\r\n                break\r\n            case 17:\r\n                remaining -= 13\r\n                break\r\n            case 18:\r\n                remaining -= 18\r\n                break\r\n            default:\r\n                remaining -= 100\r\n                break\r\n        }\r\n    })\r\n    return remaining\r\n}",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":1,"column":16,"nodeType":"132","messageId":"133","endLine":1,"endColumn":25},{"ruleId":"130","severity":1,"message":"134","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":14},{"ruleId":"130","severity":1,"message":"135","line":5,"column":33,"nodeType":"132","messageId":"133","endLine":5,"endColumn":42},{"ruleId":"130","severity":1,"message":"136","line":12,"column":26,"nodeType":"132","messageId":"133","endLine":12,"endColumn":33},{"ruleId":"130","severity":1,"message":"137","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":27},{"ruleId":"130","severity":1,"message":"138","line":2,"column":27,"nodeType":"132","messageId":"133","endLine":2,"endColumn":39},{"ruleId":"130","severity":1,"message":"135","line":5,"column":25,"nodeType":"132","messageId":"133","endLine":5,"endColumn":34},{"ruleId":"130","severity":1,"message":"139","line":10,"column":12,"nodeType":"132","messageId":"133","endLine":10,"endColumn":16},{"ruleId":"130","severity":1,"message":"131","line":1,"column":29,"nodeType":"132","messageId":"133","endLine":1,"endColumn":38},{"ruleId":"130","severity":1,"message":"140","line":1,"column":40,"nodeType":"132","messageId":"133","endLine":1,"endColumn":48},{"ruleId":"130","severity":1,"message":"141","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":22},{"ruleId":"130","severity":1,"message":"135","line":5,"column":9,"nodeType":"132","messageId":"133","endLine":5,"endColumn":18},{"ruleId":"130","severity":1,"message":"142","line":20,"column":27,"nodeType":"132","messageId":"133","endLine":20,"endColumn":31},{"ruleId":"130","severity":1,"message":"140","line":1,"column":28,"nodeType":"132","messageId":"133","endLine":1,"endColumn":36},{"ruleId":"130","severity":1,"message":"143","line":53,"column":17,"nodeType":"132","messageId":"133","endLine":53,"endColumn":25},{"ruleId":"130","severity":1,"message":"142","line":136,"column":32,"nodeType":"132","messageId":"133","endLine":136,"endColumn":36},{"ruleId":"130","severity":1,"message":"144","line":146,"column":33,"nodeType":"132","messageId":"133","endLine":146,"endColumn":41},{"ruleId":"130","severity":1,"message":"145","line":160,"column":35,"nodeType":"132","messageId":"133","endLine":160,"endColumn":47},{"ruleId":"146","severity":1,"message":"147","line":167,"column":7,"nodeType":"148","endLine":167,"endColumn":22,"suggestions":"149"},{"ruleId":"130","severity":1,"message":"150","line":7,"column":11,"nodeType":"132","messageId":"133","endLine":7,"endColumn":18},{"ruleId":"130","severity":1,"message":"151","line":1,"column":10,"nodeType":"132","messageId":"133","endLine":1,"endColumn":18},{"ruleId":"130","severity":1,"message":"152","line":1,"column":33,"nodeType":"132","messageId":"133","endLine":1,"endColumn":48},{"ruleId":"130","severity":1,"message":"131","line":2,"column":28,"nodeType":"132","messageId":"133","endLine":2,"endColumn":37},{"ruleId":"130","severity":1,"message":"153","line":4,"column":10,"nodeType":"132","messageId":"133","endLine":4,"endColumn":26},{"ruleId":"130","severity":1,"message":"154","line":12,"column":33,"nodeType":"132","messageId":"133","endLine":12,"endColumn":50},{"ruleId":"130","severity":1,"message":"155","line":13,"column":34,"nodeType":"132","messageId":"133","endLine":13,"endColumn":48},{"ruleId":"130","severity":1,"message":"141","line":2,"column":19,"nodeType":"132","messageId":"133","endLine":2,"endColumn":31},{"ruleId":"130","severity":1,"message":"156","line":175,"column":32,"nodeType":"132","messageId":"133","endLine":175,"endColumn":40},{"ruleId":"157","severity":1,"message":"158","line":7,"column":23,"nodeType":"159","messageId":"160","endLine":7,"endColumn":25},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'getUserID' is defined but never used.","'setStay' is assigned a value but never used.","'useContext' is defined but never used.","'Subscription' is defined but never used.","'user' is assigned a value but never used.","'useState' is defined but never used.","'useLazyQuery' is defined but never used.","'data' is assigned a value but never used.","'isActive' is assigned a value but never used.","'response' is assigned a value but never used.","'matchingChar' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.ID', 'refetch', 'removePlayer', 'user._id', and 'waitingResponse'. Either include them or remove the dependency array. If 'updatePlayers' needs the current value of 'props.ID', you can also switch to useReducer instead of useState and read 'props.ID' in the reducer.","ArrayExpression",["163"],"'current' is assigned a value but never used.","'useQuery' is defined but never used.","'useSubscription' is defined but never used.","'currentSessionID' is defined but never used.","'createSessionData' is assigned a value but never used.","'endSessionData' is assigned a value but never used.","'infoData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},"Update the dependencies array to be: [data, loading, props.ID, refetch, removePlayer, user._id, waitingResponse]",{"range":"166","text":"167"},[6871,6886],"[data, loading, props.ID, refetch, removePlayer, user._id, waitingResponse]"]